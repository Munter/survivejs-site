<feed xmlns="http://www.w3.org/2005/Atom"><title >SurviveJS</title><link href="http://survivejs.com/atom.xml" rel="self"> </link><link href="http://survivejs.com/"> </link><updated >2015-10-22T22:21:41+03:00</updated><id >http://survivejs.com/</id><author ><name >Juho Vepsäläinen</name><email ></email></author><entry ><title >React Component Boilerplate v1.0</title><id >areactcomponentboilerplatev102015-10-22t00:00:00+03:00</id><link href="http://survivejs.com/blog/react-component-boilerplate-10"></link><updated >2015-10-22T00:00:00+03:00</updated><content type="html">&lt;p&gt;If you &lt;a href=&quot;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=react+boilerplate&quot;&gt;try searching GitHub for React boilerplates&lt;/a&gt;, you&amp;apos;ll find over thousand results. Nothing is harder than to agree on a standard boilerplate. As a result we have many to choose from.&lt;/p&gt;
&lt;p&gt;Given I like to author React components, such as &lt;a href=&quot;https://bebraw.github.io/reactabular/&quot;&gt;Reactabular&lt;/a&gt;, I&amp;apos;ve developed a little boilerplate myself. &lt;a href=&quot;https://survivejs.github.io/react-component-boilerplate/&quot;&gt;survivejs/react-component-boilerplate&lt;/a&gt; incorporates a large amount of good practices. I&amp;apos;ll go through some of them next. I cover many of them &lt;a href=&quot;../../webpack_react/authoring_libraries/&quot;&gt;at the book&lt;/a&gt; but it doesn&amp;apos;t hurt to dig deeper.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#testing&quot; id=&quot;testing&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#testing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I implemented my testing approach based on Cesar Andreu&amp;apos;s &lt;a href=&quot;https://github.com/cesarandreu/web-app&quot;&gt;web-app&lt;/a&gt;. It is based on &lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt; (test runner), &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; (test framework), &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt; (assertions), and &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; (headless browser). Code coverage reports are generated through &lt;a href=&quot;https://gotwarlost.github.io/istanbul/&quot;&gt;istanbul&lt;/a&gt; and &lt;a href=&quot;https://github.com/douglasduteil/isparta&quot;&gt;isparta&lt;/a&gt; (Babel compatibility for istanbul). Besides casual &lt;em&gt;npm test&lt;/em&gt;, there&amp;apos;s also a TDD mode (&lt;em&gt;npm run tdd&lt;/em&gt;) so you can run tests automatically while you develop.&lt;/p&gt;
&lt;p&gt;Not surprisingly this is where most of the complexity of my boilerplate lies. There&amp;apos;s not much I can do about it, though. There are times when I wish npm allowed more granularity. If I could push test dependencies to something like &lt;code&gt;testDependencies&lt;/code&gt; or define hierarchies below &lt;code&gt;devDependencies&lt;/code&gt;, that would help me to communicate the intent better.&lt;/p&gt;
&lt;p&gt;My earlier setup relied on Facebook&amp;apos;s &lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;Jest&lt;/a&gt;. Even though it&amp;apos;s easier to hook it up, I find the current approach more developer friendly. I never could get into grips with Jest&amp;apos;s auto-mocking behavior and performance was an issue even with small libraries. It is possible the situation will change but for now I&amp;apos;m sticking with Mocha myself. Keep an eye on Jest, though.&lt;/p&gt;
&lt;p&gt;Linting is handled through &lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt;. It&amp;apos;s an amazing tool and will contribute towards the quality and consistency of your code. Read &lt;a href=&quot;../../webpack_react/linting_in_webpack/&quot;&gt;my chapter about linting&lt;/a&gt; to get into it. There&amp;apos;s &lt;em&gt;npm run lint&lt;/em&gt; and Webpack triggers it as a pre-loader. This way I get linting warnings and errors during develop. In addition I have my editor set up to show them interactively.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#handling-versions&quot; id=&quot;handling-versions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Handling Versions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#handling-versions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important part of developing libraries is actually publishing them. I&amp;apos;ve tried to keep this simple. I can get a release out simply by hitting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ npm version &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;1
$ npm publish
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push
$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know this could be hidden easily behind a single command but it&amp;apos;s not too bad as I might not want to push immediately always. A tool known as &lt;a href=&quot;https://www.npmjs.com/package/semantic-release&quot;&gt;semantic-release&lt;/a&gt; could simplify the workflow further but I haven&amp;apos;t adopted it yet. &lt;/p&gt;
&lt;p&gt;To make sure I get the right build artifacts out there in the current approach, I&amp;apos;ve set up a couple of npm hooks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ...
  &lt;span class=&quot;token property&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ...
    &lt;span class=&quot;token property&quot;&gt;&amp;quot;preversion&amp;quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;quot;npm run test &amp;amp;&amp;amp; npm run lint &amp;amp;&amp;amp; npm run dist &amp;amp;&amp;amp; npm run dist-min &amp;amp;&amp;amp; git commit --allow-empty -am \&amp;quot;&lt;/span&gt;Update dist\&lt;span class=&quot;token string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&amp;quot;prepublish&amp;quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;quot;npm run dist-modules&amp;quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&amp;quot;postpublish&amp;quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;quot;npm run gh-pages &amp;amp;&amp;amp; npm run deploy-gh-pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&amp;quot;postinstall&amp;quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;quot;node lib/post_install.js&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;preversion&lt;/em&gt; hook makes sure all tests pass, lint included, generates distribution builds, and includes those into a commit. I prefer to maintain the builds this way as it&amp;apos;s convenient and I don&amp;apos;t feel they bloat the repository too much. So far the approach has worked well.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;prepublish&lt;/em&gt; hook makes sure the npm version of the package gets generated. In short, it just triggers &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; over the source and converts possible special features and JSX I&amp;apos;m using into a form that&amp;apos;s easy to consume from the Node.js world.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;postpublish&lt;/em&gt; generates the package site and pushes it to the &lt;em&gt;gh-pages&lt;/em&gt; branch. The setup is isomorphic and it will convert the project &lt;em&gt;README.md&lt;/em&gt; into a HTML structure. This was implemented to make sure the package page works even without JavaScript. There&amp;apos;s also a minor SEO benefit. And you get to say that your boilerplate is isomorphic so there&amp;apos;s that.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;postinstall&lt;/em&gt; portion is there to make sure that it is possible to consume the package through a GitHub reference (i.e., &lt;code&gt;bebraw/reactabular#hashgoeshere&lt;/code&gt;). If I detect that there isn&amp;apos;t expected directory, it will trigger &lt;em&gt;npm run dist-modules&lt;/em&gt; just like the &lt;em&gt;prepublish&lt;/em&gt; process does. The only problem is that the current solution supports only Node.js 0.12+. It would be possible to rewrite that if it becomes an issue.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#pre-push-hook&quot; id=&quot;pre-push-hook&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Pre-push Hook&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#pre-push-hook&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I have &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; set up and make it run my tests after each push, I&amp;apos;ve gone a step further. I like to catch problems before a push. That&amp;apos;s why I&amp;apos;ve set up a pre-push hook through a package known as &lt;a href=&quot;https://www.npmjs.com/package/git-prepush-hook&quot;&gt;git-prepush-hook&lt;/a&gt;. It writes the Git configuration to your repository when you install it. You can control its behavior through &lt;em&gt;package.json&lt;/em&gt; by a declaration like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ...
  &lt;span class=&quot;token property&quot;&gt;&amp;quot;pre-push&amp;quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&amp;quot;lint&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You tell it what npm scripts to execute and it does that before a push. The biggest advantage of doing this is that it allows you to fix potential issues before they end up in public consumption. You can do the fix and then make it look as if you didn&amp;apos;t make one through an interactive rebase (&lt;code&gt;git rebase -i&lt;/code&gt;). It&amp;apos;s one of those Git features that can help to keep your version history sane.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#other-features&quot; id=&quot;other-features&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Other Features&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#other-features&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;apos;s of course &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;React Transform&lt;/a&gt; based hot loading. The Webpack configuration is a little elaborate but I&amp;apos;ve done my best to keep it readable. You can find some usual React related optimizations there (mainly env). The isomorphic portion takes some code as well.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;apos;ve been thinking of pushing some of the common parts to a library of its own to ease the maintenance effort. This is the way &lt;a href=&quot;https://www.npmjs.com/package/hjs-webpack&quot;&gt;hjs-webpack&lt;/a&gt; does it. The problem is that a boilerplate is a snapshot always. A library based approach would help in this regard. Most importantly, it would help to cut down the amount of dependencies.&lt;/p&gt;
&lt;p&gt;I believe it could be valuable to adopt a tool such as &lt;a href=&quot;https://commitizen.github.io/cz-cli/&quot;&gt;commitizen&lt;/a&gt;. That would make it easier to write meaningful Git commit messages. Even better, the tool can generate change logs for releases.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you&amp;apos;ll find my little boilerplate useful. There might be some ideas there you could adopt for your own. Boilerplates are a little problematic maintenance-wise, but as mentioned, it might be possible to alleviate that by pushing the problem elsewhere.&lt;/p&gt;
&lt;p&gt;Of course the situation is far worse if you don&amp;apos;t have a boilerplate to begin with. Even a small project tends to require quite a few dependencies before you can become productive with it.&lt;/p&gt;
</content></entry><entry ><title >React-Bootstrap - Bootstrap Rebuilt for React - Interview with Matt Smith</title><id >areactbootstrapbootstraprebuiltforreactinterviewwithmattsmith2015-10-13t00:00:00+03:00</id><link href="http://survivejs.com/blog/react-bootstrap-interview"></link><updated >2015-10-13T00:00:00+03:00</updated><content type="html">&lt;p&gt;&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; is easily one of the most popular CSS frameworks out there. Beyond grids and basic layout utilities, it provides a nice set of widgets to use. Even though you can use the CSS with React, this may become cumbersome quite soon. You will likely end up wrapping portions of Bootstrap within components of your own.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://react-bootstrap.github.io/&quot;&gt;React-Bootstrap&lt;/a&gt; is a project that solves this problem for you. To understand the project better, I&amp;apos;m interviewing Matt Smith, one of the authors.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
  &lt;span class=&quot;author&quot; style=&quot;float: right&quot;&gt;
    &lt;img src=&quot;https://www.gravatar.com/avatar/2edcba3f73592de39dc2e83826e22fe2?s=200&quot; alt=&quot;Matt Smith&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;
  &lt;/span&gt;

I have been writing software since I was in High School back in the 90s. I wasn&amp;apos;t able to land my first real job though until the mid 2000s as a QA Engineer. Automating the UI of desktop applications I didn&amp;apos;t write was not what I&amp;apos;d call fun, though the learning experience was immeasurable.
&lt;/p&gt;

&lt;p&gt;Shortly after that I was serving in the United States Marine Corps Reserve which required a break from coding to serve a 1 year tour of duty in Al Ramadi, Iraq. Soon after my return I was able to find a new job where I built a number of internal web applications for my employer.&lt;/p&gt;
&lt;p&gt;It was there that I first tested out the waters of OSS Development. I mainly stayed in the realm of the C# or .Net community until about two years ago when I started branching out. Writing well crafted quality software is my passion.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#how-would-you-describe-react-bootstrap-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-react-bootstrap-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe React-Bootstrap to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#how-would-you-describe-react-bootstrap-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React-Bootstrap is a collection of React Components that are primarily designed to work with
Bootstrap CSS classes. Bootstrap does provide some JavaScript but it&amp;apos;s tightly coupled to jQuery which does not play well with React idioms. We aim to provide parity with Bootstrap CSS in functionality and styling, though we differ in the JavaScript API.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#why-did-you-develop-react-bootstrap-&quot; id=&quot;why-did-you-develop-react-bootstrap-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop React-Bootstrap?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#why-did-you-develop-react-bootstrap-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn&amp;apos;t that credit goes to &lt;a href=&quot;https://github.com/stevoland&quot;&gt;Stephen J. Collings (stevoland)&lt;/a&gt; and &lt;a href=&quot;https://github.com/pieterv&quot;&gt;Pieter Vanderwerff (pieterv)&lt;/a&gt;. Though when I came into the picture active development on React-Bootstrap wasn&amp;apos;t really going anywhere. From what I could tell it had been abandoned, though the number of issues and pull requests kept growing.&lt;/p&gt;
&lt;p&gt;The design team at our dev shop has been using a slightly modified version of Bootstrap for years, and when we started moving to React we found React-Bootstrap. We were using Angular and didn&amp;apos;t use a core UI library leaving us to implement a lot of the Bootstrap JavaScript ourselves in an Angular world. We didn&amp;apos;t want to make that mistake again so we grabbed a hold of React-Bootstrap pretty quick.&lt;/p&gt;
&lt;p&gt;At the same time that we started this transition to React, we were also going after Section 508 and WCAG 2.0 AA Compliance. We were continually finding that the React-Bootstrap components are not compliant so we wanted to contribute back.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-kind-of-challenges-have-you-experienced-while-developing-react-bootstrap-&quot; id=&quot;what-kind-of-challenges-have-you-experienced-while-developing-react-bootstrap-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What kind of challenges have you experienced while developing React-Bootstrap?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-kind-of-challenges-have-you-experienced-while-developing-react-bootstrap-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned earlier, the React-Bootstrap project felt like a dead project around February/March of 2015. The release up on npm at that time didn&amp;apos;t even work nor had it for a few months. I had submitted a PR or two prior to that time so I reached out to Stephen and Pieter to ask if there was anything I could do to help. They were kind enough to include me in the organization and granted me push access to npm.&lt;/p&gt;
&lt;p&gt;The npm release was broken because there was a tedious manual process in place to build the JSX code and manually push that to the Bower repo and Docs repo. Most of my background is in DevOps build engineering so this was something that I knew I could fix. I moved the project from the old JSX Transformer tools and Browserify to Babel and Webpack. This made the Bower release and Docs site easier to build and develop against. Then I automated the push to those separate repos on GitHub. Common tools for this with Grunt and Gulp just weren&amp;apos;t fast enough for me, so I rolled our own tailored experience.&lt;/p&gt;
&lt;p&gt;During this time I was also working to triage issues and review/accept pull requests from the community. On most issues I was quick to say that I&amp;apos;d accept a pull request, which many people did do. This presented the next biggest problem, which was around the Firehose of issues and pull requests that just kept coming in.&lt;/p&gt;
&lt;p&gt;It was at this time that me employer sent me to the &lt;a href=&quot;http://dotnetfringe.org/&quot;&gt;.Net Fringe&lt;/a&gt;
conference. At my dev shop we have been active contributors to OSS in the .Net ecosystem for years, and this was a conference devoted to that community. While at that conference a large number of the sessions were mainly focused on breaking down the barriers that folks encounter when contributing to OSS projects. The basic undertone I walked away from that was that we as an open source community need to reach out to those that are testing out the OSS waters and welcome, no pull, them in with a warm embrace.&lt;/p&gt;
&lt;p&gt;I was already feeling overwhelmed with the number of issues and pull requests that were coming in on React-Bootstrap and my colleagues in the office didn&amp;apos;t have the bandwidth to really help. Some of them have tried, but viewed it as a second class citizen to our development efforts. I can&amp;apos;t entirely blame them for this since most of our code was still in Angular. So there was a huge cost benefit deficit competing for attention with the newer features we were getting asked to produce by the business.&lt;/p&gt;
&lt;p&gt;It was at this time that I reached out to the more frequent pull request authors that showed attention to testing and documentation with an invite to join the organization. I worked on improving the Contributing Guide and Maintaining Guide to stand as a governance for this growing team. In a sense I didn&amp;apos;t want to see the project cease progression again because of my own inabilities to keep up. I also knew that I would be moving off our front-end sites in the coming months to head up a DevOps team.&lt;/p&gt;
&lt;p&gt;Many folks did accept the invite to join the organization and we haven&amp;apos;t really heard much from them since. Though there were others that did accept the invite and are now thriving contributors. In fact I&amp;apos;d say that &lt;a href=&quot;https://github.com/taion&quot;&gt;Jimmy Jia (taion)&lt;/a&gt; and &lt;a href=&quot;https://github.com/jquense&quot;&gt;Jason Quense (jquense)&lt;/a&gt; now stand as the current technical leads with &lt;a href=&quot;https://github.com/AlexKVal&quot;&gt;Alexander Shemetovsky (AlexKVal)&lt;/a&gt; as the bulldog that just keeps fixing everything he can as fast as he can.&lt;/p&gt;
&lt;p&gt;I can say that my goal to build a community that worked together to continue building the project was a success that continues to refine the project.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React-Bootstrap still has some work to achieve Section 508 and WCAG 2.0 AA compliance, at which point we&amp;apos;ll declare a 1.0 release. We&amp;apos;ll need to keep up with React and Bootstrap to keep the project up to date with the latest features of both projects.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The future of React is undeniably very bright. I have full confidence in the core community involved in defining the best practices for building these front-end frameworks and tools.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jimmy and Jason would have more current insight to the affairs of React-Bootstrap.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks a lot for the interview Matt! I hope React-Bootstrap will have a bright future and more people will find the project. There&amp;apos;s a &lt;a href=&quot;https://react-bootstrap.github.io/getting-started.html&quot;&gt;getting started guide&lt;/a&gt; for those interested. Also check out &lt;a href=&quot;https://react-bootstrap.github.io/components.html&quot;&gt;the component listing&lt;/a&gt; to get a better idea of the capabilities of the library.&lt;/p&gt;
</content></entry><entry ><title >SurviveJS - Webpack and React v1.9.0</title><id >asurvivejswebpackandreactv1902015-10-07t00:00:00+03:00</id><link href="http://survivejs.com/blog/survivejs-19"></link><updated >2015-10-07T00:00:00+03:00</updated><content type="html">&lt;p&gt;Compared to &lt;a href=&quot;../survivejs-18&quot;&gt;1.8.0&lt;/a&gt;, &lt;code&gt;1.9.0&lt;/code&gt; can be seen as a more conservative release. There are plenty of smaller fixes and even some new content too. I decided to fix the chapter structure to the current. I rather provide less but better content. This also helps to keep the cost of a paper version down.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#towards-2-0-0-&quot; id=&quot;towards-2-0-0-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Towards &lt;code&gt;2.0.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#towards-2-0-0-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Besides integrating changes (thanks Steve!) and ideas, I gave &lt;code&gt;2.0.0&lt;/code&gt; some proper thought. With &lt;code&gt;2.0.0&lt;/code&gt; I will finally try to get the book to Amazon while getting it printed through them. This means I&amp;apos;ll need to get a proper ISBN for the book. Only smaller tweaks, such as grammar fixes, are allowed after this. That&amp;apos;s a little problematic.&lt;/p&gt;
&lt;p&gt;The way I see it, the smartest move would be to treat &lt;code&gt;2.0.0&lt;/code&gt; as an Amazon snapshot while developing the book further at Leanpub (&lt;code&gt;2.1.0&lt;/code&gt; and so on). Once &lt;code&gt;3.0.0&lt;/code&gt; is reached, Amazon would get a new snapshot. I don&amp;apos;t expect &lt;code&gt;3.0.0&lt;/code&gt; to happen anytime soon, though, as that wouldn&amp;apos;t be fair to the Amazon customers that bought &lt;code&gt;2.0.0&lt;/code&gt;. Perhaps a yearly cycle would work. That would mean a minor release per month.&lt;/p&gt;
&lt;p&gt;In order to keep it fair to potential Amazon clients, I&amp;apos;m willing to provide the Leanpub version for them using a heavily discounted upgrade cost. I&amp;apos;m a still fuzzy on the exact details but there has to be a neat transition path in place.&lt;/p&gt;
&lt;p&gt;Getting the book printed is a huge step for me personally. It&amp;apos;s great unknown but you don&amp;apos;t get ahead unless you put in the effort. At the very least I will get something for my bookshelf if nothing else. The printing costs seem adequate given the current scope of the book. The print version will likely have to be black and white to keep the cost bearable but apart from that we should be good.&lt;/p&gt;
&lt;p&gt;Ideally the book will continue to provide some level of income as that enables me to keep developing the content and technology around it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#book-improvements-1-9-0-&quot; id=&quot;book-improvements-1-9-0-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;1.9.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#book-improvements-1-9-0-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 134 commits went to &lt;code&gt;1.9.0&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;apos;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.8.0...v1.9.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#general-fixes&quot; id=&quot;general-fixes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;General Fixes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#general-fixes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Grammar was improved overall. Big thanks again Steve!&lt;/li&gt;
&lt;li&gt;Move from &lt;code&gt;&amp;lt;ul className=&amp;apos;names&amp;apos;&amp;gt;&lt;/code&gt; format to &lt;code&gt;&amp;lt;ul className=&amp;quot;names&amp;quot;&amp;gt;&lt;/code&gt;. This is the format that official React documentation uses so it&amp;apos;s better to use the same here as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linked to alternative implementations of Kanban. See &lt;a href=&quot;https://github.com/survivejs/mobservable-demo&quot;&gt;mobservable&lt;/a&gt;, &lt;a href=&quot;https://github.com/survivejs/redux-demo&quot;&gt;Redux&lt;/a&gt;, and &lt;a href=&quot;https://github.com/survivejs/cerebral-demo&quot;&gt;Cerebral/Baobab&lt;/a&gt; demos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained in more detail what Webpack actually does.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Noted that &lt;em&gt;css-loader&lt;/em&gt; requires some tweaking when using Node 0.10. See &lt;a href=&quot;https://github.com/webpack/css-loader/issues/144&quot;&gt;the issue&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;Dropped &lt;em&gt;node-libs-browser&lt;/em&gt; from project dependencies. Webpack depends on it directly now.&lt;/li&gt;
&lt;li&gt;Explained why &lt;em&gt;html-webpack-plugin&lt;/em&gt; is used.&lt;/li&gt;
&lt;li&gt;Pushed configuration paths to higher level. This way it&amp;apos;s easier to tweak them to fit your personal projects.&lt;/li&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://www.npmjs.com/package/open-browser-webpack-plugin&quot;&gt;open-browser-webpack-plugin&lt;/a&gt;. There are small plugins like this that save time once you have set them up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped &lt;em&gt;babel-core&lt;/em&gt; as &lt;em&gt;babel-loader&lt;/em&gt; depends on that directly.&lt;/li&gt;
&lt;li&gt;Replaced deprecated &lt;em&gt;react-hot-loader&lt;/em&gt; with a &lt;a href=&quot;babel-plugin-react-transform&quot;&gt;babel-plugin-react-transform&lt;/a&gt; based solution. Even though it takes more configuration, it&amp;apos;s more powerful. I recommend moving your projects to it if you are using &lt;em&gt;react-hot-loader&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;code&gt;debugger;&lt;/code&gt; statement. I realized this is a feature not many people are aware of. It&amp;apos;s good to have it mentioned as a tip.&lt;/li&gt;
&lt;li&gt;Mentioned that spread operator can be used to replace &lt;code&gt;concat&lt;/code&gt;. I.e., instead of &lt;code&gt;this.state.notes.concat({id: uuid.v4(), task: &amp;apos;New task&amp;apos;})&lt;/code&gt; you could do &lt;code&gt;[...this.state.notes, [{id: uuid.v4(), task: &amp;apos;New task&amp;apos;}]]&lt;/code&gt;. You see this particularly in Redux examples so it&amp;apos;s good to know.&lt;/li&gt;
&lt;li&gt;Explained why we have to retain the state at &lt;code&gt;App&lt;/code&gt; level. We&amp;apos;ll push that to a nicer place in the following chapter of course.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&quot;https://github.com/casesandberg/react-context/&quot;&gt;feature detection&lt;/a&gt; example as that showcases well when to use a context.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on Flux explanation. Now we start from a unidirectional flow and show how that becomes a cycle in the architecture.&lt;/li&gt;
&lt;li&gt;Noted that &lt;code&gt;{notes}&lt;/code&gt; is analogous to &lt;code&gt;{notes: notes}&lt;/code&gt; and linked to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer&quot;&gt;property shorthand&lt;/a&gt; documentation. We are using this shorthand a lot so it&amp;apos;s worth discussing it.&lt;/li&gt;
&lt;li&gt;Explained by I don&amp;apos;t use &lt;code&gt;splice&lt;/code&gt; although it would work here.&lt;/li&gt;
&lt;li&gt;Dropped matryoshka image. That was a poor analogy. Better to save the space for something else.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Passed Lane data through &lt;code&gt;lane&lt;/code&gt; prop instead of object spreading. It is easier to understand what&amp;apos;s going on in this solution.&lt;/li&gt;
&lt;li&gt;Explained why Object rest spread syntax is used when it&amp;apos;s used.&lt;/li&gt;
&lt;li&gt;Explained why &lt;code&gt;waitFor&lt;/code&gt; is used in a clearer manner.&lt;/li&gt;
&lt;li&gt;Fixed the ordering between &lt;code&gt;LaneActions.detachFromLane&lt;/code&gt; and &lt;code&gt;NoteActions.delete&lt;/code&gt;. It is a very good idea to detach a note from a lane before actually removing it from the system. Else you might end up trying to render notes that don&amp;apos;t exist.&lt;/li&gt;
&lt;li&gt;Noted that it would be a very good idea to get rid of notes associated to a lane when a lane is removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Showed how to indicate where to move a note while you are moving. This improves user experience somewhat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified JSX related Webpack configuration. This was possible because &lt;em&gt;react-hot-loader&lt;/em&gt; was dropped.&lt;/li&gt;
&lt;li&gt;Moved cache invalidation hashes back to filenames. I&amp;apos;m going to take &lt;a href=&quot;http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/&quot;&gt;Steve Souders&lt;/a&gt;&amp;apos; word on it.&lt;/li&gt;
&lt;li&gt;Dropped the section about isomorphic rendering. That felt like a kludge and you would never do it like this in a real world configuration. As a result I removed it from the book. It is a far better idea for me to discuss the topic in a blog post of its own later on.&lt;/li&gt;
&lt;li&gt;Explained how to analyze your Webpack build statistics using &lt;a href=&quot;http://webpack.github.io/analyse/&quot;&gt;the online tool&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#testing-react-&quot; id=&quot;testing-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#testing-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote the introduction and added testing pyramid to get better into the topic.&lt;/li&gt;
&lt;li&gt;Updated configuration to work with the adjusted setup (no &lt;em&gt;react-hot-loader&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Linked to more associated tooling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#typing-with-react-&quot; id=&quot;typing-with-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React*&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#typing-with-react-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed &lt;code&gt;Lane&lt;/code&gt; related &lt;code&gt;propTypes&lt;/code&gt;. There were a couple of glitches to fix.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained why &lt;code&gt;preLoaders&lt;/code&gt; is used for linting. These get executed first. If a linter fails, you&amp;apos;ll want to know about it before doing anything else.&lt;/li&gt;
&lt;li&gt;Explained how to enable specific ES6 features with ESLint. Of course as we go through &lt;em&gt;babel-eslint&lt;/em&gt;, we can skip that but it&amp;apos;s good to know.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explained how &lt;code&gt;style-loader&lt;/code&gt; and &lt;code&gt;css-loader&lt;/code&gt; work in tandem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I originally intended to have this release to include React 0.14 related fixes. Rather than to keep you waiting, I decided to push those to &lt;code&gt;2.0.0&lt;/code&gt;. An intermediate &lt;code&gt;1.9.5&lt;/code&gt; might be possible but we&amp;apos;ll see.&lt;/p&gt;
&lt;p&gt;The book content is fixed and I&amp;apos;ll perform tweaks only to the current content. I&amp;apos;m most interested in expanding the sections about Flow and TypeScript. Even though Flow has been developing fast, there are still some issues I have to wrestle with.&lt;/p&gt;
&lt;p&gt;I also have to look into integrating &lt;a href=&quot;https://github.com/yahoo/react-dnd-touch-backend&quot;&gt;react-dnd-touch-backend&lt;/a&gt;. I&amp;apos;ve done some preliminary work on that and hope to get included it in &lt;code&gt;2.0.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have a variety of blog content coming up. It&amp;apos;s the perfect place for me to play with ideas in a more freeform manner. As I stated earlier, getting that Amazon release done is the biggest hurdle for me.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy this release. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry ><title >Cerebral - Expressing Application Flow with Signals - Interview with Christian Alfoni</title><id >acerebralexpressingapplicationflowwithsignalsinterviewwithchristianalfoni2015-10-05t00:00:00+03:00</id><link href="http://survivejs.com/blog/cerebral-interview"></link><updated >2015-10-05T00:00:00+03:00</updated><content type="html">&lt;p&gt;I ran into &lt;a href=&quot;http://www.christianalfoni.com/&quot;&gt;Christian Alfoni&lt;/a&gt; through his original blog early this year (2015). He had written a nice post about Webpack. That led me to provide a several suggestions and I realized we might want to combine some of our knowledge in the form of a &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;React/Webpack cookbook&lt;/a&gt;. Eventually the development led to this book so I suppose you can blame Christian for that.&lt;/p&gt;
&lt;p&gt;While I&amp;apos;ve been plugging away with the book, Christian has been busy developing cool technology. This includes &lt;a href=&quot;https://github.com/christianalfoni/EmptyBox&quot;&gt;EmptyBox&lt;/a&gt;, a static site generator, &lt;a href=&quot;https://github.com/christianalfoni/formsy-react&quot;&gt;formsy-react&lt;/a&gt;, a form input builder and validator for React, and of course &lt;a href=&quot;http://christianalfoni.com/cerebral/&quot;&gt;Cerebral&lt;/a&gt;, the primary topic of our interview. You could say it puts some brains to React and Angular development. We&amp;apos;ll also discuss &lt;a href=&quot;https://github.com/christianalfoni/addressbar&quot;&gt;addressbar&lt;/a&gt;, a routing solution with a twist.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot; id=&quot;how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How did you discover Webpack and React? Can you provide a bit of background?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;/assets/img/christian.jpg&quot; alt=&quot;Christian Alfoni&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;
&lt;/span&gt;
I had saved up some money and chose to quit my job the summer of last year (2014). I wanted to spend 6 months on my own researching web technologies and play around with projects. I feel kinda lucky that way, as obsessed I am with JavaScript and building things I now got the chance to level up. At my previous employer I left a Backbone app with a Grunt workflow. Before that it was all vanilla JavaScript&amp;#x2026; crazy, but learned a lot!
&lt;/p&gt;

&lt;p&gt;So I suppose my timing was good. I started my expedition by diving into Angular, but now both React and Flux started to get some solid ground. Not being too opinionated by Angular I instantly saw the benefits of the &amp;#x201C;one way flow&amp;#x201D; of Flux. Now I had a strong concept of storing any kind of state, it being from the server or produced on the client. This was a huge issue at my previous employer, sharing client side state between views and keeping it in sync.&lt;/p&gt;
&lt;p&gt;At the same time, I was exploring Gulp and saw this video where Pete Hunt introduced Webpack. As I had time on my hands, I decided to make an overview of different build tools and write an article on it. It got some attention and the feedback gave me the confidence to share more knowledge. Other developers were actually interested in what I had to say. It was a big eye opener!&lt;/p&gt;
&lt;p&gt;When comparing the build tools I realized that Webpack was awesome, but had one big issue. It was hard to understand and configure. With my new earned confidence in sharing knowledge I wrote a new article. This one got even more attention, also by you Juho. It is amazing to see all the work you have done after that little comment. You have done fantastic work!&lt;/p&gt;
&lt;p&gt;Anyways, around this time I got a job offer and since I soon needed income I grabbed the opportunity. My employer wanted to build a React framework for their huge application portfolio. I suggested we use Webpack to handle all the packaging, use ES6 etc. It has been a great success and that led to the last article on &lt;a href=&quot;http://www.christianalfoni.com/articles/2015_04_19_The-ultimate-webpack-setup&quot;&gt;The ultimate Webpack setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I often get questions about combining Webpack with other build tools like Grunt or Gulp. I have never been in a situation where that is necessary. Webpack is just a brilliant piece of engineering and it makes my day so much easier. Other projects like &lt;a href=&quot;http://jspm.io/&quot;&gt;JSPM&lt;/a&gt; are interesting though. We are moving towards HTTP2 and bundling files does not fit in with that technology. It will be interesting to see how this pans out! &lt;a href=&quot;https://mattwilcox.net/web-development/http2-for-front-end-web-developers&quot;&gt;More info&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#why-did-you-develop-cerebral-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot; id=&quot;why-did-you-develop-cerebral-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Cerebral? How would you describe it to someone who has never heard of it? What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#why-did-you-develop-cerebral-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though Flux made a lot of sense to me as a concept, the implementation details did not. In my opinion it is a bit verbose and many stores gave me the same problems that Flux fixed in my view layer. Like circular dependencies and just understanding the flow of state changes.&lt;/p&gt;
&lt;p&gt;Then I found &lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab&lt;/a&gt;, a single state tree. It fixed all the issues I had with the initial Flux implementation and kept the concept of &amp;#x201C;one way flow&amp;#x201D;. All my state was now in one place. No dispatcher and no splitting state into different &amp;#x201C;containers&amp;#x201D;. I wrote &lt;a href=&quot;http://www.christianalfoni.com/articles/2015_02_06_Plant-a-Baobab-tree-in-your-flux-application&quot;&gt;an article on this too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now I was actually pretty happy about developing applications. With React I got a great concept for composing my view layer. With Baobab I got a great concept for storing all my state in a single entity. But there was still a problem&amp;#x2026; the stuff that happens &amp;quot;in between&amp;quot;. The layer that actually produces the state.&lt;/p&gt;
&lt;p&gt;As this was bugging me I got some &amp;#x201C;a-ha&amp;#x201D; moments. One &amp;quot;a-ha&amp;quot; was a video on &amp;#x201C;turning the database inside out&amp;#x201D; and talking to a backend colleague about it. I also got an &amp;quot;a-ha&amp;quot; watching a clip on &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; with its time travel debugging. Most importantly though, I got my head around why immutability is so great. One day everything kinda merged into one big &amp;#x201C;A-HA&amp;#x201D; moment.&lt;/p&gt;
&lt;p&gt;No matter what you call your architecture it has three main layers. A layer to produce UI and get user input, a layer to handle this input and produce state and a layer to store the state. I wanted to make these three layers as clear and simple as possible. So I thought a lot about what this state changing layer looks like today. How do we actually express handling these inputs from the view layer and update our state?&lt;/p&gt;
&lt;p&gt;What I realized is that we often do this with a single function. We get some user input and call a function that does one or more state updates. This is fine if you just want to increase/decrease a counter. It is not so nice if you want to handle more than one HTTP response and do other conditionals.&lt;/p&gt;
&lt;p&gt;It is difficult to understand the flow of an application reading implementation details. So I wanted to express the state changes of my app without having to dive into implementation details. I also wanted to be able to analyze this flow to create developer tools. Reading your &lt;a href=&quot;../redux-interview&quot;&gt;interview with Dan Abramov&lt;/a&gt; I can totally relate to how Redux got started. With Cerebral it is the signals the makes this possible.&lt;/p&gt;
&lt;p&gt;Signals is a way to express state changes in your application using pure functions. These pure functions, called actions, are composed into a signal. This makes a signal declarative. It is almost like reading a sentence and it can be complex without being hard to read and reason about. But it is also functional as these actions are just functions. So for example factories is an important part of expressing your state flow.&lt;/p&gt;
&lt;p&gt;As signals are arrays of actions you can also use the new spread operator. This allows you to compose action chains together with ease. So a signal never calls or depends on other signals, you just reuse actions. &amp;#x201C;Composition over inheritance&amp;#x201D;.&lt;/p&gt;
&lt;p&gt;So Cerebral is this layer between your state storing and UI. It handles the complex part of your application, state changing flow. It is a single powerful entity representing the layer between state and ui, as displayed here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/cerebral_state_ui.png&quot; class=&quot;center-image&quot; width=&quot;425&quot; height=&quot;510&quot; alt=&quot;Cerebral is between the state and the UI&quot;&gt;&lt;/p&gt;
&lt;p&gt;Running the debugger next to the UI gives you insight into all these three layers. The UI, the state changing flow and the current state of the application. It is pretty cool!
About the future of Cerebral. I have been working on a project for a year now.&lt;/p&gt;
&lt;p&gt;When the Cerebral idea came up, I got a breakthrough. I decided to apply for some funding and what do you know, I got it! From October 1st I will spend most of my time on this project and Cerebral. For Cerebral this means cleaning up any bugs/API and make it production ready.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#can-you-describe-what-addressbar-https-github-com-christianalfoni-addressbar-is-about-given-there-are-so-many-routers-already-why-to-develop-yet-another-one-&quot; id=&quot;can-you-describe-what-addressbar-https-github-com-christianalfoni-addressbar-is-about-given-there-are-so-many-routers-already-why-to-develop-yet-another-one-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you describe what &lt;a href=&quot;https://github.com/christianalfoni/addressbar&quot;&gt;addressbar&lt;/a&gt; is about? Given there are so many routers already, why to develop yet another one?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#can-you-describe-what-addressbar-https-github-com-christianalfoni-addressbar-is-about-given-there-are-so-many-routers-already-why-to-develop-yet-another-one-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So routers have two main concepts. Listen to url changes and act upon url changes. Different routers has their own implementation of how they listen to url changes. They also have different and opinionated ways of acting upon those changes. Some routers just triggers a function related to a url change, like &lt;a href=&quot;https://visionmedia.github.io/page.js/&quot;&gt;Page JS&lt;/a&gt;. Most of them goes way beyond this though. Often routers dive into the view layer of your application and decides what views to display.&lt;/p&gt;
&lt;p&gt;As applications are complex you often want to load some data before doing the actual change in the view. Your router now fetches data for you to achieve this. But this data is something you want to store so now your router also needs a relationship with your state store. Some of them also do transitions in the UI. In my opinion this increases complexity as you already have concepts for this. View updates, ajax requests, transitions etc. are things you already do in the general state changing flow of your app.&lt;/p&gt;
&lt;p&gt;Inspired by React I got this idea about the addressbar not being this magical URL thing. Just a plain input you could listen to and change the value of. If that was the case I think a lot of developers would have a much lower threshold to experiment with urls. Create their own custom routing logic. Something that makes sense for the specific application.&lt;/p&gt;
&lt;p&gt;As a result I built a project called &lt;a href=&quot;https://github.com/christianalfoni/addressbar&quot;&gt;addressbar&lt;/a&gt;. It just exposes the addressbar as an input you can listen to. You can also prevent default behaviour on it and change the value of it. Now you can focus on the important part, creating the routing logic.&lt;/p&gt;
&lt;p&gt;So one way of doing routing is to map the url to a url definition which in turn triggers a function. With help from a couple of guys on the Cerebral gitter channel we created the project &lt;a href=&quot;https://github.com/christianalfoni/url-mapper&quot;&gt;url-mapper&lt;/a&gt;. Combine &amp;#x201C;addressbar&amp;#x201D; with &amp;#x201C;url-mapper&amp;#x201D; and you have yourself a typical router. Much like the Page JS approach. But I think there are many other approaches to handling URL changes.&lt;/p&gt;
&lt;p&gt;An example of this is the Cerebral Router. It uses both &amp;#x201C;addressbar&amp;#x201D; and &amp;#x201C;url-mapper&amp;#x201D; to bind URLs to signals. This means that you can trigger signals in your app and the bound url will update in the addressbar. If you trigger the url from a hyperlink or in the addressbar that will result in the same behaviour. So it works both ways.&lt;/p&gt;
&lt;p&gt;You do not have to do a typical route change to update the url, it is just a side-effect of running a signal. This gives you great freedom in developing your application. You just think about these signals that defines the state changing flow of your app. You can actually bring in URLs into your app later if you wanted to. This might not make complete sense just reading about it, but I have a &lt;a href=&quot;https://www.youtube.com/watch?v=PZjXPziD9Cw&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So to summarize. I think it would benefit us to think about routing differently. When I read discussions on routing they often tend to be &amp;#x201C;How can we make the router change the views in the app?&amp;#x201D;. I might be a bit controversial, but I think that is the wrong approach.&lt;/p&gt;
&lt;p&gt;Let&amp;apos;s say you have an &amp;#x201C;isLoading&amp;#x201D; state.  You use that state in your views to toggle a &amp;#x201C;loading-indication&amp;#x201D;. Why can not the url &amp;#x201C;/messages&amp;#x201D; set a state called &amp;#x201C;currentPage=&amp;#x2019;messages&amp;#x2019;&amp;#x201D;? You would then use the exact same approach to render the correct page. It is just less complex in my opinion because now a url change is a state change like any other. No special logic and you can go about it however you want.&lt;/p&gt;
&lt;p&gt;I am going a bit off trail here! What I want to emphasize here is that addressbar lowers the threshold for developers. The threshold to explore urls in new ways. Creating new experiences and evolve urls to mean something more. Not just &amp;#x201C;what view to display&amp;#x201D;, but for example &amp;#x201C;what signal to trigger&amp;#x201D; like the Cerebral-Router.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobservable-https-mweststrate-github-io-mobservable-or-redux-https-rackt-github-io-redux-&quot; id=&quot;at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobservable-https-mweststrate-github-io-mobservable-or-redux-https-rackt-github-io-redux-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;At the moment a lot of architecture related innovation seems to happen. What do you think of alternative approaches such as &lt;a href=&quot;https://mweststrate.github.io/mobservable/&quot;&gt;mobservable&lt;/a&gt; or &lt;a href=&quot;https://rackt.github.io/redux/&quot;&gt;redux&lt;/a&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobservable-https-mweststrate-github-io-mobservable-or-redux-https-rackt-github-io-redux-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I think a lot of innovation lately has been improving stores in Flux. It can be a bit difficult to reason about them. Projects like Mobservable and Redux do exactly this. They make it easier to reason about how to store state. It is amazing to see how much attention Redux has gotten. The community is enthusiastic and contributes a lot with their own ideas. Kudos to Dan for inspiring so many developers and handling it so well!&lt;/p&gt;
&lt;p&gt;Personally I have not dived into Mobservable and Redux. For me it was Baobab that made the difference, which had an earlier release. It is a single immutable state tree storing all the state of your application.&lt;/p&gt;
&lt;p&gt;So both Redux and Mobservable make Flux simpler. That said, I think there are still challenges to tackle. I am going to compare these two projects to Cerebral, but only to highlight what Cerebral does. I am not saying that any of them are bad.&lt;/p&gt;
&lt;p&gt;Both the solutions mentioned here hides state from the other state entities. It being reducers or stores. Take note that Redux does indeed produce a single state tree by combining its reducers. But inside a reducer, you do not have access to the whole tree as far as I know.&lt;/p&gt;
&lt;p&gt;So many entities to store state is in my experience a challenge. Large applications often need to know about state in other stores/reducers when producing new state. This is often related to relational data, like looking up state by id. I do not think an approach where you isolate different parts of your state is the way to go.&lt;/p&gt;
&lt;p&gt;You risk creating relationships which can be hard to reason about and even create. If you just have one entity, there is no relationship, which makes it easier to reason about and scale your app. This is what I like about &lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab&lt;/a&gt;. It is impossible to go wrong in how you structure your state.&lt;/p&gt;
&lt;p&gt;But Baobab does not have any concepts for producing state. In Redux you produce state in the reducer itself or in combination with an async action creator. Mobservable does this inside the stores. What these two have in common, like many others, is that producing a state change is expressed with a single function. You have to read the implementation details of this function to understand it. This is easy when you want to add a todo or change a counter, but our applications are more complex than that.&lt;/p&gt;
&lt;p&gt;I think the concept of expressing a &amp;#x201C;state changing flow&amp;#x201D; is where we have to go next. Cerebral is a contribution to this. Libraries like &lt;a href=&quot;http://cycle.js.org/&quot;&gt;Cycle.js&lt;/a&gt; uses FRP concepts to express this flow. I thought about this for Cerebral, but to me it is hard to reason about complex flows using FRP.&lt;/p&gt;
&lt;p&gt;RxJS has so many methods and most examples converts input to a single state change. App flows are a lot more complex than that. HTTP responses, conditionals, multiple state changes, relational data, optimistic updates etc. I just really really want it declared as one flow.&lt;/p&gt;
&lt;p&gt;But FRP in JavaScript is still in its early adoption and I am not trying to state FRP as a bad thing at all. I just think its current form is too difficult to use for the common JavaScript developer. Andr&amp;#xE9; Staltz is doing fantastic work with Cycle.js. Making FRP more developer friendly for application development. Evan Czaplicki, creator of Elm, is also doing a tremendous effort. I think both Dan and Andr&amp;#xE9; will agree that Evan has been a great inspiration for our contributions.&lt;/p&gt;
&lt;p&gt;I just want to say that I think it is great that everybody is so open to sharing what they build. Also sharing theories on how we can make development more fun than painful. What works and makes sense to people is what inspires the next step of this evolution.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What developers miss out on with React is that it is not related to templating at all. React is not a templating engine, it is a rendering engine. It has a lot more in common with game rendering engines than Handlebars etc. This makes React able to render to different targets in lightning speed. In the browser that would be the DOM, but it can render to whatever. So getting projects like React Native is great!&lt;/p&gt;
&lt;p&gt;What I also think trips developers up is that components in React are not views. They are closer to defining a single HTML tag than defining a complete view in your application. This unlike templates. I can see how scary a component would be if you copied an Angular template into it&amp;#x2026; the thing is, you would never do that.&lt;/p&gt;
&lt;p&gt;Also JSX is controversial and is partly guilty in tripping developers up on what React is. I have been using it from the start and love it. I understand why developers used to working with HTML templates does not embrace it though. Often overlooking what React is all about. It is just sad and I think this will continue to be an unfair challenge for Reacts adoption.&lt;/p&gt;
&lt;p&gt;It is also a matter of Web Components. React JS, as I understand it, does not support Web Components. Now, I do not think Web Components will be app specific building blocks at all. I think they will be &lt;code&gt;&amp;lt;GoogleMap/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;GoogleDocs/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Youtube/&amp;gt;&lt;/code&gt; types of tags. Web Components will just become new superpowered HTML tags that we can use globally in our apps, like the existing tags.&lt;/p&gt;
&lt;p&gt;So why do I say that? The problem with Web Components, as far as I know, is that they are loaded globally. You do not have a good way to wrap these components into modules. But maybe I am just not getting it! Anyways, React will have a missing feature if it is unable to render these new HTML tags. I think we will import a lot of them in the future.&lt;/p&gt;
&lt;p&gt;So to summarize I think React is here to stay for a long time. It will be exciting to see how Ember and Angular catches up with their new rendering solutions too. As I understand they will also support native development and web components.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It would be interesting to talk to someone invested in FRP.  Who uses it for something more than counters and lists. Since you already interviewed Andr&amp;#xE9;, it would be great to get Evan in here too. And if you do, tell him thanks for all his great work :-)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Christian! I hope the best of luck with your projects. It is always inspiring to see alternative solutions like these to pop up. If you became interested in Cerebral, consider checking out &lt;a href=&quot;https://gitter.im/christianalfoni/cerebral&quot;&gt;gitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/survivejs/cerebral-demo&quot;&gt;Cerebral port of Kanban&lt;/a&gt;. You can also try running &lt;a href=&quot;https://chrome.google.com/webstore/detail/cerebral-debugger/ddefoknoniaeoikpgneklcbjlipfedbb&quot;&gt;Cerebral Chrome debugger plugin&lt;/a&gt; against &lt;a href=&quot;http://www.christianalfoni.com/todomvc/&quot;&gt;TodoMVC demo&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry ><title >ShaderFrog - Building a WebGL Shader Editor and Composer - Interview with Andrew Ray</title><id >ashaderfrogbuildingawebglshadereditorandcomposerinterviewwithandrewray2015-09-28t00:00:00+03:00</id><link href="http://survivejs.com/blog/shaderfrog-interview"></link><updated >2015-09-28T00:00:00+03:00</updated><content type="html">&lt;p&gt;It&amp;apos;s always impressive when people take an idea and turn it into a concrete service. &lt;a href=&quot;http://andrewray.me/&quot;&gt;Andrew Ray&lt;/a&gt; did this with his &lt;a href=&quot;http://shaderfrog.com/&quot;&gt;ShaderFrog&lt;/a&gt;. It&amp;apos;s a portal where you can design 3D shaders using WebGL. Most interestingly, it has been developed using React.&lt;/p&gt;
&lt;p&gt;As building tools such as this isn&amp;apos;t easy, I&amp;apos;m primarily curious to know why Ray picked React and what sort of challenges he faced during the development of his service.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot; id=&quot;how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How did you discover Webpack and React? Can you provide a bit of background?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#how-did-you-discover-webpack-and-react-can-you-provide-a-bit-of-background-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/b3a21f6147bcc6bd9d997d5cc5b5f87c?size=200&quot; alt=&quot;Andrew Ray&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;
&lt;/span&gt;

The front-end ecosystem is constantly morphing, so we have to stay on top of front-end news. That&amp;apos;s how I heard about React, most likely from Hacker News. The path to Webpack was natural from there. Many example projects use Webpack and there&amp;apos;s a lot of Webpack and React development overlap in the community.
&lt;/p&gt;

&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#why-did-you-develop-shaderfrog-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot; id=&quot;why-did-you-develop-shaderfrog-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop ShaderFrog? How would you describe it to someone who has never heard of it? What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#why-did-you-develop-shaderfrog-how-would-you-describe-it-to-someone-who-has-never-heard-of-it-what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I built ShaderFrog to solve a problem that no one was aware existed. I was making a WebGL 3d browser game, where your character is a bubble in an underwater environment. To make a &lt;a href=&quot;http://shaderfrog.com/app/view/147&quot;&gt;bubble look convincing visually&lt;/a&gt; you have to have a few effects, such as reflection and refraction. The program that draws these effects is called a &amp;quot;shader.&amp;quot;&lt;/p&gt;
&lt;p&gt;It tells the computer how to &amp;quot;shade&amp;quot; a 3d object. I also had a &lt;a href=&quot;http://shaderfrog.com/app/view/30&quot;&gt;fireball powerup&lt;/a&gt;, and I wanted to show the player getting the powerup by combining the fire effect (a shader) and the bubble effect (another shader).&lt;/p&gt;
&lt;p&gt;That meant I had to take these two programs and combine them together by hand, and essentially add their output color together. It was quite tedious, and I thought I could build a tool to automate the process. That&amp;apos;s how ShaderFrog was born.&lt;/p&gt;
&lt;p&gt;ShaderFrog is a tool to design effects called shaders for 3d games and applications in a visual environment without writing code. There are still plenty of features to add, and it&amp;apos;s still finding its place in the world. Right now I&amp;apos;m continuing to build out more features and doing some marketing.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#why-did-you-choose-to-use-react-for-the-project-which-alternatives-did-you-consider-&quot; id=&quot;why-did-you-choose-to-use-react-for-the-project-which-alternatives-did-you-consider-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you choose to use React for the project? Which alternatives did you consider?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#why-did-you-choose-to-use-react-for-the-project-which-alternatives-did-you-consider-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a front-end developer for most of my career, React feels like the first framework that got it &amp;quot;right.&amp;quot; I had previously tried Angular and Backbone, and toyed with Ember, but none of them felt like they actually helped me solve complex UI problems.&lt;/p&gt;
&lt;p&gt;One of React&amp;apos;s biggest benefits is it stays as close to normal Javascript paradigms as possible. You don&amp;apos;t have to understand &lt;code&gt;$scope&lt;/code&gt; or learn a huge API like Backbone. It&amp;apos;s just functions and Javascript classes. Even JSX is just HTML and Javascript.&lt;/p&gt;
&lt;p&gt;Learning Flux was a steep hill for me, but in the end you&amp;apos;re basically writing event listeners and plain Javascript objects. Server side rendering was very important to me too. I honestly feel like without React, I could not have built ShaderFrog.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-sort-of-challenges-did-you-encounter-during-development-what-would-you-do-differently-&quot; id=&quot;what-sort-of-challenges-did-you-encounter-during-development-what-would-you-do-differently-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What sort of challenges did you encounter during development? What would you do differently?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-sort-of-challenges-did-you-encounter-during-development-what-would-you-do-differently-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React is a newcomer to the field and we&amp;apos;re still figuring out how to do things correctly. CSS is the easiest target. React is teaching me that CSS is a fundamentally flawed concept and that our newest iteration of inline styles, or &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules&lt;/a&gt;, is a welcomed future. There is plenty of legacy CSS in ShaderFrog that I am embarrassed by, but at least I can see the light at the end of the tunnel.&lt;/p&gt;
&lt;p&gt;I faced some challenges specific to making a 3d editor. I need to maintaining 60 frames per second constantly. For example, let&amp;apos;s say I have three lights moving around my scene. Every time their position changes, I have to fire an action through Flux, which triggers many component updates.&lt;/p&gt;
&lt;p&gt;If you do this three times per &lt;code&gt;requestAnimationFrame&lt;/code&gt;, you get two unnecessary virtual DOM comparison checks. The solution to this problem was to &amp;quot;batch&amp;quot; the Flux calls until the last one, so my stores only emit once per loop, removing unnecessary work.&lt;/p&gt;
&lt;p&gt;When I first started work on ShaderFrog, I didn&amp;apos;t fully understand Flux, so I built a few things using event listeners binding to specific data properties. This code is still in my application, and it&amp;apos;s often a source of bugs, and more difficult to reason about than the Flux code. If I could change things I would have stuck more closely to the Flux pattern, because every time I diverge, it causes me problems and increased cognitive load.&lt;/p&gt;
&lt;p&gt;Server side rendering was also a big challenge. React has an unspoken idea that you get server side rendering for free, but this is very far from the truth. For static pages, yes, it&amp;apos;s easy to render some components to an HTML string. For dynamic pages that require data pre-fetching that must be done differently on the client and the server, there are countless edge cases. I hope that in the future, Relay solves many of these problems.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React has paved a bright future of front-end development, but React probably isn&amp;apos;t the end of the road. A better virtual DOM library may come out. We&amp;apos;ve already seen the evolution of the Flux pattern with Redux, and the evolution of CSS with inline and CSS modules. I would definitely say we&amp;apos;re moving towards more computer science principles boosting the productivity of the front-end.&lt;/p&gt;
&lt;p&gt;We&amp;apos;re moving towards more componentization, less coupling, and more portability. React has shown many front-end developers the true power of an entirely self contained component. I think these principles will continue to drive the productivity and enjoyment of front-end development forward.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have no idea! :)&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Andrew! I wish you great success with &lt;a href=&quot;http://shaderfrog.com/&quot;&gt;ShaderFrog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I remember writing little shaders of my own in the past. If you&amp;apos;ve ever wondered what to use math for, well, here&amp;apos;s a good application. You can actually put operations, such as &lt;code&gt;mod&lt;/code&gt;, into use here! It&amp;apos;s amazing how little operations can make nice patterns.&lt;/p&gt;
&lt;p&gt;To get started, &lt;a href=&quot;http://shaderfrog.com/app&quot;&gt;pick up a shader&lt;/a&gt; you like and start modifying. If you want to dig into theory, you can&amp;apos;t go wrong with NeHe&amp;apos;s material. They&amp;apos;ve written &lt;a href=&quot;http://nehe.gamedev.net/article/glsl_an_introduction/25007/&quot;&gt;an introduction to GLSL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to share your shaders at the comments.&lt;/p&gt;
</content></entry><entry ><title >Cycle.js - Reactive Framework for HCI - Interview with André Staltz</title><id >acyclejsreactiveframeworkforhciinterviewwithandrestaltz2015-09-21t00:00:00+03:00</id><link href="http://survivejs.com/blog/cycle-interview"></link><updated >2015-09-21T00:00:00+03:00</updated><content type="html">&lt;p&gt;If there&amp;apos;s one thing that has been bubbling below for a couple of years now, it must be reactive programming. There have been solutions, such as &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot;&gt;RxJS&lt;/a&gt; or &lt;a href=&quot;https://github.com/baconjs/bacon.js&quot;&gt;bacon.js&lt;/a&gt;, but they haven&amp;apos;t quite made it to the mainstream yet. I feel the time for that might be close, though.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cycle.js.org/&quot;&gt;Cycle.js&lt;/a&gt; builds on top of RxJS and characterizes itself as a fully reactive JavaScript framework for Human-Computer Interaction. The question of course is what that means. Andr&amp;#xE9; Staltz, the author of Cycle.js, is the best person to tell us.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#can-you-tell-a-bit-about-yourself-&quot; id=&quot;can-you-tell-a-bit-about-yourself-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell a bit about yourself?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#can-you-tell-a-bit-about-yourself-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/d992db0c8f42fcee52f96dc320f8aa04?s=200&quot; alt=&quot;Andr&amp;#xE9; Staltz&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;
&lt;/span&gt;

I am a UI developer at Futurice in Finland, with extensive knowledge in reactive programming. In my daily work I build web apps and Android applications, and on my free time I build open source libraries such as Cycle.js and contribute to ReactiveX.
&lt;/p&gt;

&lt;p&gt;A lot of people have read the &lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;Introduction to Reactive Programming you&amp;apos;ve been missing&lt;/a&gt; that I wrote in the summer of 2014, or have seen &lt;a href=&quot;http://RxMarbles.com&quot;&gt;RxMarbles&lt;/a&gt;. That is how most people know me.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#how-would-you-describe-cycle-js-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-cycle-js-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe Cycle.js to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#how-would-you-describe-cycle-js-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cycle.js is a framework where your app is described as a simple function taking an event stream as input and outputting an event stream. These event streams might sound magical, but they are pretty simple. They are similar to arrays in reality, except they evolve over time instead of being static.&lt;/p&gt;
&lt;p&gt;A simple Cycle.js app might take an array-like sequence of clicks and output an array-like sequence of DOM elements. So essentially coding is just describing how to dynamically transform a stream of user events into a stream of interface elements.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#why-did-you-develop-cycle-js-&quot; id=&quot;why-did-you-develop-cycle-js-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Cycle.js?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#why-did-you-develop-cycle-js-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started developing Cycle.js after I took React for a spin and was disappointed with its API. I initially got really excited about the Virtual DOM concept in React, but could not understand why the API is built on OOP classes, state mutation, and imperative event handlers. There is a mismatch between React&amp;#x2019;s foundational ideas (reactive rendering and UI as pure function of state) and its implementation means (OOP, classes, imperative programming).&lt;/p&gt;
&lt;p&gt;Cycle.js is a React alternative where implementation matches foundational ideas by applying functional and reactive programming to the extreme. The result is a tiny API surface where everything is either a function or an RxJS Observable.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been slowly learning more about hard core functional programming, in other words Haskell. I have also been experimenting with Elm, a more approachable Haskell alternative for the Web.&lt;/p&gt;
&lt;p&gt;I have many plans on what to develop next. My time will probably be mainly focused on improving Cycle.js: making it simpler to use, building integrations with React Native, integrating the upcoming rewritten RxJS by Netflix, etc. But I hope to join efforts with the pure functional programming community, be it &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;, &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, or &lt;a href=&quot;http://www.purescript.org/&quot;&gt;PureScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cycle.js has a lot of functional techniques but JavaScript is not a language that supports functional programming well enough. I miss the types, the immutability, and the clean syntax.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React and front-end in general? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-does-the-future-look-like-for-react-and-front-end-in-general-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Functional programming is definitely a trend in the front-end community. React is also at the center of this trend. I recall Sebastian Markb&amp;#xE5;ge mentioned multiple times in his interview at React Europe that React is all about functional programming and how to introduce it in a clever way to people unfamiliar with this paradigm.&lt;/p&gt;
&lt;p&gt;It seems there are still a lot of unsolved problems regarding APIs. In modern JavaScript, we use functional and reactive techniques, often mixed with some imperative programming. One on hand, imperative programming is familiar and simple for many of us, but functional and reactive have amazing benefits often hidden behind obscure terminology. Yet these two sides are often incompatible in the same application.&lt;/p&gt;
&lt;p&gt;The community will need to actively experiment with alternatives, and we need to start considering transpiled functional languages (PureScript, Elm) more and more if our techniques are mainly functional anyway. I am not convinced we have stable best practices and good guiding principles in how to architect applications. Cycle.js is just one attempt at finding that guiding principle.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Evan Czaplicki. I was skeptic about Elm before meeting him, but after meeting him in person, I strongly believe his work with Elm is doing a great service to the whole community in bringing functional programming to a level most of us can digest. Evan has vision, is enthusiastic, reads Computer Science papers, and has a ton of great and wild ideas.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks a lot for the interview Andr&amp;#xE9;! Perhaps a programming model as demonstrated by Cycle.js is the future. It always takes time for the community to warm up to the ideas. Interestingly there&amp;apos;s a proof of concept that implements &lt;a href=&quot;https://github.com/jas-chen/thisless-react&quot;&gt;thisless React&lt;/a&gt;, inspired by Cycle.js of course!&lt;/p&gt;
&lt;p&gt;If this interview made you interested in Cycle.js, consider the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cycle.js.org/getting-started.html&quot;&gt;Getting started guide&lt;/a&gt;. I set up a small &lt;a href=&quot;https://github.com/survivejs/cycle-starter&quot;&gt;boilerplate&lt;/a&gt; to help you get up to speed faster.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cycle.js.org/cycle-time-travel/&quot;&gt;Time traveling with Cycle.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.edanschwartz.com/2015/09/18/dead-simple-rxjs-todo-list/&quot;&gt;A Dead-Simple Todo List with Cycle.js&lt;/a&gt; by Edan Schwartz&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitter.im/cyclejs/cycle-core&quot;&gt;Online support through Gitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vic/awesome-cyclejs&quot;&gt;Awesome Cycle.js&lt;/a&gt; contains a lot more.&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry ><title >Redux - Reinventing Flux - Interview with Dan Abramov</title><id >areduxreinventingfluxinterviewwithdanabramov2015-09-14t00:00:00+03:00</id><link href="http://survivejs.com/blog/redux-interview"></link><updated >2015-09-14T00:00:00+03:00</updated><content type="html">&lt;p&gt;I remember seeing these strange &lt;code&gt;webpack.config.js&lt;/code&gt; files in JavaScript projects for a long time. I didn&amp;#x2019;t give &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; a good look until the promise of hot loading with React drew me in. &lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;Dan Abramov&lt;/a&gt;&amp;#x2019;s &lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot;&gt;React Hot Loader&lt;/a&gt; was life changing for me.&lt;/p&gt;
&lt;p&gt;Besides React Hot Loader, Dan is behind well-known projects such as &lt;a href=&quot;https://gaearon.github.io/react-dnd/&quot;&gt;React DnD&lt;/a&gt; and &lt;a href=&quot;https://rackt.github.io/redux/&quot;&gt;Redux&lt;/a&gt;. Redux in particular has begun to make waves across the community even though it&amp;#x2019;s a young project. Compared to earlier &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux&lt;/a&gt; inspired implementations it is particularly small (~2k) yet powerful.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#how-did-you-discover-react-can-you-provide-a-bit-of-background-&quot; id=&quot;how-did-you-discover-react-can-you-provide-a-bit-of-background-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How did you discover React? Can you provide a bit of background?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#how-did-you-discover-react-can-you-provide-a-bit-of-background-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;/assets/img/dan.jpg&quot; alt=&quot;Dan Abramov&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;
&lt;/span&gt;
I think it&amp;#x2019;s a typical story. In 2014, when I was working at &lt;a href=&quot;http://stampsy.com&quot;&gt;Stampsy&lt;/a&gt;, we needed to pivot from an iPad app to a webapp in a matter of a few months. We only knew Backbone so we went with it, but as the app grew more dynamic and complicated, we knew we couldn&amp;#x2019;t use it for much longer.
&lt;/p&gt;

&lt;p&gt;However, we also decidedly did not adopt any opinionated data binding library because we wanted to maintain a simple mental model of what&amp;#x2019;s happening in the app. At some point in time, there was a widget with a dozen of different states that occurred several times on the page, and we knew we &lt;em&gt;had&lt;/em&gt; to throw some data binding library into the mix.&lt;/p&gt;
&lt;p&gt;A coworker of mine suggested React a few month before, but I shrugged at JSX and didn&amp;#x2019;t investigate. So he suggested it again, and I decided to go for it. The same evening, I got this widget working exactly as I wanted, and I was hooked. Over the course of the next nine months, we gradually rewrote the Backbone app into a React app. Then React Router came along, and we migrated fully. All the while adding new features.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#as-i-ran-to-you-through-react-hot-loader-what-motivated-you-to-develop-the-project-in-the-first-place-&quot; id=&quot;as-i-ran-to-you-through-react-hot-loader-what-motivated-you-to-develop-the-project-in-the-first-place-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;As I ran to you through React Hot Loader what motivated you to develop the project in the first place?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#as-i-ran-to-you-through-react-hot-loader-what-motivated-you-to-develop-the-project-in-the-first-place-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There were a couple of factors.&lt;/p&gt;
&lt;p&gt;Firstly, it was watching our designer &lt;a href=&quot;https://twitter.com/kkga_&quot;&gt;Gadzhi&lt;/a&gt; struggle with tweaking components inside modal windows. (By the way, Gadzhi created &lt;a href=&quot;https://github.com/kkga/spacegray&quot;&gt;Spacegray&lt;/a&gt;, which is still more popular than any of my projects!)&lt;/p&gt;
&lt;p&gt;Every time he&amp;#x2019;d change some tiny piece of UI, he&amp;#x2019;d have to refresh, open that modal, find that widget, discover that something is wrong, and change it again, over and over. It was even more painful with widgets like autocomplete, or dynamic widgets that change their state too quickly.&lt;/p&gt;
&lt;p&gt;Secondly, I read a book on Erlang when I was a teenager, and it said something that changed my life forever:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/pure_functions.jpg&quot; class=&quot;center-image&quot; width=&quot;400&quot; height=&quot;400&quot; alt=&quot;Pure functions can be replaced while the application is running&quot;&gt;&lt;/p&gt;
&lt;p&gt;Thirdly, I was in awe of Bret Victor&amp;#x2019;s videos.&lt;/p&gt;
&lt;p&gt;At some point I was reading Webpack docs and it described something mysterious called &lt;a href=&quot;http://webpack.github.io/docs/hot-module-replacement.html&quot;&gt;hot module replacement&lt;/a&gt;. I &lt;a href=&quot;http://stackoverflow.com/q/24581873&quot;&gt;asked about it&lt;/a&gt;, and &lt;a href=&quot;http://stackoverflow.com/a/24587740&quot;&gt;Tobias answered&lt;/a&gt;. I realized I could mix HMR with React, and this was the birth of React Hot Loader.&lt;/p&gt;
&lt;p&gt;I don&amp;#x2019;t think React Hot Loader is important as a piece of tech&amp;#x2014;it&amp;#x2019;s really not&amp;#x2014;but I definitely see people&amp;#x2019;s expectations of web tooling capabilities raise, and I&amp;#x2019;m happy if my work helped this. &lt;a href=&quot;https://github.com/elm-lang/elm-reactor&quot;&gt;Elm&lt;/a&gt; and &lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;ClojureScript&lt;/a&gt; community are doing exciting work in this field, and I&amp;#x2019;m happy that JavaScript community is now paying more attention to the functional programming and developer experience it enables.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#how-would-you-describe-redux-to-someone-who-has-never-heard-of-it-&quot; id=&quot;how-would-you-describe-redux-to-someone-who-has-never-heard-of-it-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;How would you describe Redux to someone who has never heard of it?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#how-would-you-describe-redux-to-someone-who-has-never-heard-of-it-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all, it&amp;#x2019;s tiny (about 2k). If you remove sanity checks that prevent common beginner mistakes, it&amp;#x2019;s 1K. I&amp;#x2019;m not saying this to brag, and I&amp;#x2019;m not obsessed with microlibraries. However, this should give you an idea about the scope of the project.&lt;/p&gt;
&lt;p&gt;Although it is often used instead of Backbone, Flummox, or some other Flux-inspired library, the size of the API surface is comparable to the original &lt;a href=&quot;https://github.com/facebook/flux&quot;&gt;Flux&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;Why would you use it? Redux embraces immutability and &lt;a href=&quot;https://youtu.be/1uRC3hmKQnM?t=15m26s&quot;&gt;ties your hands to free your mind.&lt;/a&gt; If you developed a complex JavaScript application, you might have fallen into one of two traps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using mutable models in asynchronous code which is later impossible to trace, understand, modify, or refactor;&lt;/li&gt;
&lt;li&gt;using a framework that promised to solve this problem, and then spending hours debugging the guts of this framework and working around its limitations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redux is my attempt to answer the following question: what is the least opinionated API surface useful for predictably managing state of complex apps with a &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;great developer experience&lt;/a&gt;? What hooks do we need to expose to create &lt;a href=&quot;https://github.com/xgrommx/awesome-redux&quot;&gt;an ecosystem&lt;/a&gt; around a 2K library?&lt;/p&gt;
&lt;p&gt;There is nothing new in Redux: David Nolen has been talking about benefits of a single immutable state tree &lt;a href=&quot;http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/&quot;&gt;for two years now&lt;/a&gt;, and Evan Czaplicki has made an enormous effort to describe the &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;Elm architecture&lt;/a&gt; from which Redux borrows its ideas.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#why-did-you-develop-redux-&quot; id=&quot;why-did-you-develop-redux-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why did you develop Redux?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#why-did-you-develop-redux-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn&amp;#x2019;t mean to create a Flux framework. When React Europe was first announced, I proposed a talk on &amp;#x201C;hot reloading and time travel&amp;#x201D; but to be honest I had no idea how to implement time travel. I thought about it for a while, and I knew there was prior art in &lt;a href=&quot;http://elm-lang.org&quot;&gt;Elm&lt;/a&gt;, so I read &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;Elm Architecture&lt;/a&gt;, but forgot about it soon. I &lt;a href=&quot;https://github.com/gaearon/flux-hot-loader/issues/1&quot;&gt;attempted&lt;/a&gt; to create a &amp;#x201C;Flux Hot Loader&amp;#x201D; but it was full of &lt;a href=&quot;https://github.com/gaearon/flux-hot-loader/blob/e74ca3ca4493e1855af37cb72a18b66d2a967efc/index.js#L68-L120&quot;&gt;horrible hacks&lt;/a&gt; to work around all the side effects inside Flux Stores: registering a handler, managing subscriptions.&lt;/p&gt;
&lt;p&gt;I wanted the logic of the Stores to be hot reloadable so I tried to move subscriptions and registering outside the Stores. I also realized I needed to guarantee the data to be immutable. I remembered how Pete Hunt and others described Flux Stores as &lt;code&gt;state, action =&amp;gt; state&lt;/code&gt;, and how Jing Chen suggested me to replay actions for hot reloading. So all of this was in my head, but I was still prototyping when I released Redux 0.1.0.&lt;/p&gt;
&lt;p&gt;I had these &amp;#x201C;stateless Stores&amp;#x201D; (now we call them reducers) that take &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; and return the next &lt;code&gt;state&lt;/code&gt;. This let me implement hot reloading for their logic. However, there was still a big missing piece: I had this &amp;#x201C;dispatcher&amp;#x201D; thing from Flux that would call those &amp;#x201C;stateless Stores&amp;#x201D;.&lt;/p&gt;
&lt;p&gt;Then Andrew Clark &lt;a href=&quot;https://gist.github.com/acdlite/9f1b5883d132ad242323&quot;&gt;suggested&lt;/a&gt; we just combine reducer functions into a single reducer function. This would kill the need for dispatcher. Just like UI component tree has one component at the root, different reducer functions can be called from a single root reducer function. Later I realized that this is exactly &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;Elm architecture&lt;/a&gt;, and I just didn&amp;#x2019;t understand it at first.&lt;/p&gt;
&lt;p&gt;This is how Redux came to be. I was trying to write some code for a fancy React Europe demo, but it turned out that people really liked the architecture, so I marketed it as a library, although there is really very little code there.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am happy to have moved Redux to &lt;a href=&quot;http://github.com/rackt&quot;&gt;rackt&lt;/a&gt; where we share ownership of quality React-related code. I&amp;#x2019;ve been doing things on my own for quite a while, and lately it&amp;#x2019;s been more stressful because of the attention my work is receiving, so I intend to &lt;a href=&quot;http://250bpm.com/blog:50&quot;&gt;step back&lt;/a&gt; from the active maintenance of Redux once I&amp;#x2019;m happy with it. (And I almost am.)&lt;/p&gt;
&lt;p&gt;Andrew Clark is collaborating with &lt;a href=&quot;https://reactjs-training.com/&quot;&gt;Ryan and Michael&lt;/a&gt; on the &lt;a href=&quot;https://github.com/acdlite/redux-react-router&quot;&gt;React Router integration&lt;/a&gt;&amp;#x2014;people have been asking for it for a long time, so I&amp;#x2019;m full of joy this is finally happening.&lt;/p&gt;
&lt;p&gt;I have released &lt;a href=&quot;https://github.com/gaearon/react-transform-boilerplate&quot;&gt;a few new tools&lt;/a&gt; that are going to obsolete React Hot Loader. I will write a post describing them in greater detail soon. I am also going to work on screencasts about Redux, as I promised in &lt;a href=&quot;https://www.patreon.com/reactdx&quot;&gt;my Patreon campaign&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And then&amp;#x2014;who knows?&amp;#x2014;I might even take a day job!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobservable-https-mweststrate-github-io-mobservable-or-cerebral-http-christianalfoni-com-cerebral-&quot; id=&quot;at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobservable-https-mweststrate-github-io-mobservable-or-cerebral-http-christianalfoni-com-cerebral-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;At the moment a lot of architecture related innovation seems to happen. What do you think of alternative approaches such as &lt;a href=&quot;https://mweststrate.github.io/mobservable/&quot;&gt;mobservable&lt;/a&gt; or &lt;a href=&quot;http://christianalfoni.com/cerebral/&quot;&gt;cerebral&lt;/a&gt;?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#at-the-moment-a-lot-of-architecture-related-innovation-seems-to-happen-what-do-you-think-of-alternative-approaches-such-as-mobservable-https-mweststrate-github-io-mobservable-or-cerebral-http-christianalfoni-com-cerebral-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am not the right person to ask, as I have not used them. I&amp;#x2019;m definitely in awe of the work Christian has been putting into Cerebral and the &lt;a href=&quot;http://www.youtube.com/watch?v=xCIv4-Q2dtA&quot;&gt;developer experience behind it&lt;/a&gt;. Its concept of signals and expressing async flow declaratively is &lt;a href=&quot;https://github.com/rackt/redux/issues/343&quot;&gt;also very interesting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My hope with Redux is that it&amp;#x2019;s extensible enough that great ideas and patterns find its way into it as userland extensions like &lt;a href=&quot;https://rackt.github.io/redux/docs/advanced/Middleware.html&quot;&gt;Redux middleware&lt;/a&gt;. My other hope is that migrating &lt;em&gt;from&lt;/em&gt; Redux to something better won&amp;#x2019;t be difficult because of its tiny API surface.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Look no further than &lt;a href=&quot;https://www.youtube.com/watch?v=Zemce4Y1Y-A&quot;&gt;Sebastian&amp;#x2019;s talk&lt;/a&gt;. We&amp;#x2019;re going to see more &lt;a href=&quot;https://medium.com/@mjackson/universal-javascript-4761051b7ae9&quot;&gt;universality&lt;/a&gt;. We&amp;#x2019;re going to see both cross-platform, as well as platform-specific components for DOM, server, native, &lt;a href=&quot;https://github.com/gaearon/react-blessed-hot-motion&quot;&gt;console&lt;/a&gt;, WebGL, you name it.&lt;/p&gt;
&lt;p&gt;With the advent of &lt;a href=&quot;http://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html&quot;&gt;pure functions as components&lt;/a&gt;, we&amp;#x2019;re also entering the era of a new kind of universality: components that work across libraries. If you don&amp;#x2019;t use imperative APIs, what&amp;#x2019;s the different between a React component function, Deku component function and a Cycle component function? Only the rendering backend and element factories. If you use JSX, you can literally replace the view framework, and pure function components will &amp;#x201C;just work&amp;#x201D; with the new engine.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/andrestaltz&quot;&gt;Andr&amp;#xE9; Staltz&lt;/a&gt;, creator of &lt;a href=&quot;http://cycle.js.org/&quot;&gt;Cycle&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Dan! It has been certainly amazing to see how much React has evolved within a year. And of course we can thank you for some of the innovation - hot loading and Redux in particular.&lt;/p&gt;
&lt;p&gt;It was straight-forward to port the &lt;a href=&quot;https://github.com/survivejs/redux-demo&quot;&gt;Kanban example of the book to Redux&lt;/a&gt;. There&amp;apos;s a lot of familiar code. It has been just structured a little differently. It is easy to understand what&amp;apos;s going on.&lt;/p&gt;
&lt;p&gt;If Redux piqued your interest, check out &lt;a href=&quot;https://rackt.github.io/redux/&quot;&gt;the official documentation&lt;/a&gt; to get started. Even though the library is tiny, it comes with high quality documentation. See the following resources for more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html&quot;&gt;Full-Stack Redux Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@bananaoomarang/handcrafting-an-isomorphic-redux-application-with-love-40ada4468af4&quot;&gt;Tutorial: Handcrafting an Isomorphic Redux Application (With Love)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/happypoulp/redux-tutorial&quot;&gt;happypoulp/redux-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry ><title >SurviveJS - Webpack and React v1.8.0</title><id >asurvivejswebpackandreactv1802015-09-13t00:00:00+03:00</id><link href="http://survivejs.com/blog/survivejs-18"></link><updated >2015-09-13T00:00:00+03:00</updated><content type="html">&lt;p&gt;We have once more new chapters in the book. I&amp;apos;m going to try a new model with these. For now the full versions of the testing and typing chapters will be available through &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;Leanpub&lt;/a&gt; only. The community version will contain TLDR;s for these so you still get the core points. Of course the project source is public for examination.&lt;/p&gt;
&lt;p&gt;By doing this I want to give my supporters a small edge. As a result they&amp;apos;ll get the access to the new material first. If it looks like this works, I don&amp;apos;t mind developing more content and opening old as new chapters get developed. Consider it as a poor man&amp;apos;s Kickstarter. We can even agree on goals if that works better.&lt;/p&gt;
&lt;p&gt;Pricing-wise I&amp;apos;ve bumped the minimum price of the book to $20 as I believe that reflects its current value. I may do another bump later on as I understand how the situation develops.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#book-improvements-v1-8-0-&quot; id=&quot;book-improvements-v1-8-0-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;v1.8.0&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#book-improvements-v1-8-0-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 137 commits went to &lt;code&gt;v1.8.0&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;apos;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.7.5...v1.8.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#general-fixes&quot; id=&quot;general-fixes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;General Fixes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#general-fixes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Grammar was improved overall. Big thanks Steve!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;app/main.js[x]&lt;/em&gt; was renamed as &lt;em&gt;app/index.js[x]&lt;/em&gt;. This simplifies Webpack entry configuration as you can point directly to &lt;code&gt;app&lt;/code&gt;. This resolves to the index file within the directory and saves some hassle.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#webpack-and-react&quot; id=&quot;webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. This free editor has grown fast. It gained JSX support in &lt;code&gt;v0.8.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Fixed basic JSX example. A React component should return a single node.&lt;/li&gt;
&lt;li&gt;Linked to a &lt;a href=&quot;https://medium.com/@housecor/react-s-jsx-the-other-side-of-the-coin-2ace7ab62b98&quot;&gt;blog post about JSX shock&lt;/a&gt;. It goes more detail about the experience.&lt;/li&gt;
&lt;li&gt;Updated Webpack example to use &lt;code&gt;eval-source-map&lt;/code&gt; instead of &lt;code&gt;eval&lt;/code&gt;. This is consistent with the earlier chapter. In our case we can avoid &lt;code&gt;eval&lt;/code&gt;. Even though it&amp;apos;s faster we can afford to go for quality.&lt;/li&gt;
&lt;li&gt;Explained &lt;code&gt;resolve.extensions&lt;/code&gt; in detail. Simply put this Webpack property allows us to control the way it matches against files (is it ok to skip extension or not).&lt;/li&gt;
&lt;li&gt;Moved Babel to use &lt;code&gt;.babelrc&lt;/code&gt;. This will become even more important in the future as &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;react-transform&lt;/a&gt; Babel plugin will replace the current hot loader.&lt;/li&gt;
&lt;li&gt;Documented how to control &lt;code&gt;.babelrc&lt;/code&gt; based on env easily. This is important when you want to perform branching based on your build target.&lt;/li&gt;
&lt;li&gt;Mentioned about &lt;a href=&quot;https://github.com/facebook/react-devtools&quot;&gt;React Developer Tools&lt;/a&gt;. They give you a better idea of what&amp;apos;s going on at your code. Available for both Chrome and Firefox.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Noted that hot loading won&amp;apos;t pick up changes made to a &lt;code&gt;constructor&lt;/code&gt;. It simply replaces method contents so these get missed. It would be nice to find a good alternative to those &lt;code&gt;bind&lt;/code&gt; statements that is performant and works with hot loading.&lt;/li&gt;
&lt;li&gt;Explained what &lt;code&gt;super()&lt;/code&gt; actually does. Simply put it invokes the same method of the parent class.&lt;/li&gt;
&lt;li&gt;Mentioned that using a &lt;em&gt;context&lt;/em&gt; might be a viable option for dealing with &lt;code&gt;onEdit&lt;/code&gt;. It is currently and undocumented feature. Dmitry Kudryavtsev goes into a good detail at his article &lt;a href=&quot;https://medium.com/@skwee357/the-land-of-undocumented-react-js-the-context-99b3f931ff73&quot;&gt;The land of undocumented react.js: The Context&lt;/a&gt;. React 0.14 will introduce a stable context API and it&amp;apos;s worth discussing then.&lt;/li&gt;
&lt;li&gt;Caught possible &lt;code&gt;alt.bootstrap&lt;/code&gt; related exception. It can fail if it receives data it cannot interpret. Better to deal with that than to blow up.&lt;/li&gt;
&lt;li&gt;Linked to Sebastian Markb&amp;#xE5;ge&amp;apos;s expanded explanation of &lt;a href=&quot;https://gist.github.com/sebmarkbage/07bbe37bc42b6d4aef81&quot;&gt;JSX spread attributes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Made &lt;code&gt;get(ids)&lt;/code&gt; more tolerant against missing data. Now it doesn&amp;apos;t return possible empty (&lt;code&gt;undefined&lt;/code&gt; or such) results. Of course getting that sort of data at &lt;code&gt;localStorage&lt;/code&gt; isn&amp;apos;t a good idea in the first place but sometimes it&amp;apos;s a good idea to be a little defensive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pushed &lt;code&gt;ItemTypes&lt;/code&gt; below &lt;em&gt;app/constants/itemTypes.js&lt;/em&gt;. Given they are constants that feels like the right place for those. I noticed this while implementing the &lt;a href=&quot;https://github.com/survivejs/redux-demo&quot;&gt;Redux version of the Kanban&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Expanded explanations. I tend to go somewhat terse on my first pass of content. Now I&amp;apos;ve expanded on possibly clear parts so it&amp;apos;s easier to see what&amp;apos;s going on and why.&lt;/li&gt;
&lt;li&gt;Passed &lt;code&gt;id&lt;/code&gt; instead of &lt;code&gt;data&lt;/code&gt; to &lt;code&gt;Note&lt;/code&gt;. This change simplified &lt;code&gt;move&lt;/code&gt; logic somewhat and it goes according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;the law of Demeter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dropped redundant references to &lt;code&gt;TARGET&lt;/code&gt;. Now we can avoid setting &lt;code&gt;TARGET&lt;/code&gt; at &lt;em&gt;package.json&lt;/em&gt; as we deduce the target based on npm lifecycle information.&lt;/li&gt;
&lt;li&gt;Noted that peeking at the warnings Uglify.js, the minifier, provides can be beneficial.&lt;/li&gt;
&lt;li&gt;Expanded on splitting &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; bundles. Now it&amp;apos;s easier to see what&amp;apos;s going on and, most importantly, why.&lt;/li&gt;
&lt;li&gt;Noted &lt;code&gt;ExtractTextPlugin&lt;/code&gt; related gotchas. It won&amp;apos;t work through &lt;code&gt;loader&lt;/code&gt; form. Instead you have to use &lt;code&gt;loaders: [ExtractTextPlugin.extract(&amp;apos;style&amp;apos;, &amp;apos;css!autoprefixer&amp;apos;)]&lt;/code&gt; or such. If you need to use multiple loaders with it, note the syntax! You should use the &lt;code&gt;!&lt;/code&gt; form in the second parameter to add more if needed.&lt;/li&gt;
&lt;li&gt;Noted that &lt;a href=&quot;https://github.com/webpack/webpack/issues/1315&quot;&gt;chunkhash seems to be broken&lt;/a&gt; at the moment. For now I would suggest generating hashes of your own but I understand it&amp;apos;s a heavy solution. Hopefully this one gets fixed soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#testing-react&quot; id=&quot;testing-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Testing React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#testing-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a new chapter! The chapter can likely use some work still. I&amp;apos;ll probably cover techniques such as mocking in the future but the basic setup inspired by Cesar Andreu&amp;apos;s &lt;a href=&quot;https://github.com/cesarandreu/web-app&quot;&gt;web-app&lt;/a&gt; is there. We also get some tests done so that&amp;apos;s good.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#typing-with-react&quot; id=&quot;typing-with-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Typing with React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#typing-with-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is another new chapter. In the chapter I show how to annotate our project using &lt;a href=&quot;https://facebook.github.io/react/docs/reusable-components.html&quot;&gt;propTypes&lt;/a&gt;. This is one of those steps you should take to solidify your project.&lt;/p&gt;
&lt;p&gt;There is a basic introduction to &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt;. Unfortunately the current version is missing some functionality our project would need. I have to get back to this later as the tool develops further.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; will receive JSX support in 1.6. That&amp;apos;s another tool I want to cover once it gets out.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linting-in-webpack&quot; id=&quot;linting-in-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Linting in Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#linting-in-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrote introduction to be easier to approach.&lt;/li&gt;
&lt;li&gt;Mentioned about &lt;a href=&quot;http://eslint.org/blog/2015/09/eslint-v1.4.0-released/&quot;&gt;ESLint autofixing&lt;/a&gt;. This is a feature that allows you to fix certain linting errors automatically. As it&amp;apos;s new, not a lot of rules are supported yet.&lt;/li&gt;
&lt;li&gt;Explained ESLint env configuration detail. That&amp;apos;s important to know especially when you are dealing with multiple environments and testing tools.&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&quot;http://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt;. This tool allows you to maintain project-wide coding style. There&amp;apos;s a good level of editor/IDE support. It&amp;apos;s a valuable tool in a team environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on &lt;code&gt;npm adduser&lt;/code&gt; and mentioned &lt;code&gt;npm login&lt;/code&gt; alias to clear up confusion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mentioned &lt;a href=&quot;https://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added &amp;quot;resources&amp;quot; sidebar to the site. I&amp;apos;ll be setting similar ones for other chapters. I&amp;apos;ll likely push this to a separate repository so it&amp;apos;s easier to contribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given there&amp;apos;s a &lt;a href=&quot;https://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html&quot;&gt;release candidate of React 0.14&lt;/a&gt; out there, it likely doesn&amp;apos;t take that long for a final version to appear. This will lead to some important changes in the book. Most importantly it will allow me to default to function syntax for components. In addition I can dig into features such as context.&lt;/p&gt;
&lt;p&gt;Once I&amp;apos;m convinced that &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform&quot;&gt;babel-plugin-react-transform&lt;/a&gt; is stable enough and that it works well with the project, I&amp;apos;ll change my recommendation to it. It&amp;apos;s already worth a look.&lt;/p&gt;
&lt;p&gt;I&amp;apos;ll also develop the content based on your feedback. The site may receive some small updates. I would love to do something about the highlighting of the code examples and improve the way the are laid out (show added/removed lines better).&lt;/p&gt;
&lt;p&gt;I&amp;apos;ll write at least one more chapter for my Leanpub readers. The way the situation develops determines the rest.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy this release. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome.&lt;/p&gt;
&lt;p&gt;I&amp;apos;m still a little conflicted about Amazon and dead tree versions. One option is that I&amp;apos;ll do a snapshot (&lt;code&gt;v2.0.0&lt;/code&gt;) that will be published. Leanpub version would then continue from there. Amazon buyers would obviously receive a heavy discount on Leanpub. It&amp;apos;s more about reaching more people with the work than anything else.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry ><title >Front-end Singularity and How to Deal with It</title><id >afrontendsingularityandhowtodealwithit2015-09-06t00:00:00+03:00</id><link href="http://survivejs.com/blog/frontend-singularity-is-here"></link><updated >2015-09-06T00:00:00+03:00</updated><content type="html">&lt;p&gt;Technological progress is both exhilarating and terrifying thing. And by the looks of it, it just keeps on progressing faster and faster. This has lead to an idea of technological singularity. As singularity is reached, technology develops so fast humans can&amp;apos;t keep up with the progress anymore. It feels like something similar is happening with front-end development right now.&lt;/p&gt;
&lt;p&gt;This is a topic I&amp;apos;ve had to ponder about for a presentation known as &lt;a href=&quot;https://survivejs.github.io/frontend-in-2015/&quot;&gt;Frontend in 2015 - Clear the Decks&lt;/a&gt;. I believe the term &amp;quot;clear the decks&amp;quot; gets to the gist of it. Embrace change.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-big-bang-of-frameworks&quot; id=&quot;the-big-bang-of-frameworks&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Big Bang of Frameworks&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#the-big-bang-of-frameworks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As &lt;a href=&quot;https://twitter.com/geraldyeo/status/640036032138846208&quot;&gt;Gerald Yeo put it&lt;/a&gt;, we&amp;apos;re experiencing an explosion of frameworks - a big bang. We&amp;apos;ve gone from literally nothing to an amazing amount of alternatives. Add libraries, such as React, to that and you end up with a massive ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; alone has over 180k packages to give you a sense of scale. By this rate it will reach million packages by 2020 as it keeps growing faster and faster. Of course the growth comes with problems of its own. How do you find the good packages and know which ones are maintained well?&lt;/p&gt;
&lt;p&gt;From the perspective of a developer this means it&amp;apos;s impossible to keep up with the development. Even as a book author I have trouble keeping up. I can only imagine how difficult it is for normal developers that have their hands full keeping the boat from sinking.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-hype-cycle&quot; id=&quot;the-hype-cycle&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Hype Cycle&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#the-hype-cycle&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This all ties to the concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Hype_cycle&quot;&gt;the hype cycle&lt;/a&gt;. In the context of JavaScript that&amp;apos;s something we&amp;apos;re experiencing constantly. Each framework and new technique goes through the cycle. After initial excitement you will face the reality. Eventually the situation will stabilize and, of course, something new will come along. To quote Teletubbies, &amp;quot;Again-Again&amp;quot;!&lt;/p&gt;
&lt;p&gt;As new solutions become available, they can learn from the earlier efforts. For instance, you can see the influence of React in Angular 2.0 and other up and coming frameworks. Eventually the most powerful ideas make it to the standards (i.e. Web Components). In turn this allows libraries and frameworks to collaborate.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#working-across-boundaries&quot; id=&quot;working-across-boundaries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Working Across Boundaries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#working-across-boundaries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No matter what solution you are using, there&amp;apos;s always room for collaboration. Even though we might choose our &amp;quot;side&amp;quot; and prefer some specific stack, the world is never black and white. I believe this is the reason why shared, lower level constructs, such as ones enabled by Web Components, are so important.&lt;/p&gt;
&lt;p&gt;Ideally Web Components will make it possible to work across boundaries. Instead of having separate bindings of &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; per framework, it would be more beneficial to have canonical bindings which to consume. Hopefully the world moves into that direction.&lt;/p&gt;
&lt;p&gt;Interestingly Angular 2.0 can consume Web Components already and I can only hope others will follow the suit. Anything we can do to enable collaboration across boundaries is worth it. npm has shown that already but we can go further than that.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#preparing-for-the-future&quot; id=&quot;preparing-for-the-future&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Preparing for the Future&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#preparing-for-the-future&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The future is already here &amp;#x2014; it&amp;apos;s just not very evenly distributed. - William Gibson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&amp;apos;s no telling what the world will look like in a year. It&amp;apos;s easier to look back and see how antiquated things were. Progress happens so gradually it can be difficult to realize it. Some bleeding edge developers are already experiencing the future while mainstream is behind in many ways. Of course sticking to the bleeding edge implies a certain amount of pain.&lt;/p&gt;
&lt;p&gt;It is hard to prepare for the future as so many things are possible. When it comes to software architecture it may be a good idea to design for change. As new winds blow, you may want to rethink your approach. As a result the architecture has to live. Web development is organic by definition. It is grown, not built.&lt;/p&gt;
&lt;p&gt;As I put it in my presentation slides subtitle, prepare to clear the decks. It&amp;apos;s hard to avoid that in web development. If you are prepared for change, you can deal with it better.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-need-for-new&quot; id=&quot;the-need-for-new&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Need for New&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#the-need-for-new&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In some ways front-end development is very frustrating. It is particularly difficult for perfectionists. As you get bombarded by new, shiny things, it can be easy to feel inadequate.&lt;/p&gt;
&lt;p&gt;Looking through job requirements doesn&amp;apos;t do any favors either. There are simply so many matters to master. And as they say, jack of all trades is a master of none. At the same time you should master something to stand out at least a little bit.&lt;/p&gt;
&lt;p&gt;This is one of the reasons why I wrote my book. I wanted to go through a slice of interesting technologies. Besides being useful for me personally, I believe the material saves some effort on your part. It is important to be aware of some of the available technologies if nothing else.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important part of front-end development is knowing what you don&amp;apos;t know. You don&amp;apos;t have to be an absolute master at everything. There simply isn&amp;apos;t enough time for that. Instead, build around your strengths and stay curious.&lt;/p&gt;
&lt;p&gt;Big thanks to &lt;a href=&quot;http://lemire.me/blog/archives/2015/09/04/revisiting-vernor-vinges-predictions-for-2025/&quot;&gt;Daniel Lemire&lt;/a&gt; for inspiration. I also appreciate the feedback from &lt;a href=&quot;https://twitter.com/mbrochh&quot;&gt;Martin Brochhaus&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/geraldyeo&quot;&gt;Gerald Yeo&lt;/a&gt; that pushed me to write this post.&lt;/p&gt;
</content></entry><entry ><title >How to Succeed at Technical Books?</title><id >ahowtosucceedattechnicalbooks2015-09-04t00:00:00+03:00</id><link href="http://survivejs.com/blog/succeed-at-technical-books"></link><updated >2015-09-04T00:00:00+03:00</updated><content type="html">&lt;p&gt;I&amp;apos;ve &lt;a href=&quot;http://www.nixtu.info/2015/07/on-economics-of-ebook-publishing.html&quot;&gt;written about book publishing earlier&lt;/a&gt; at my personal blog. It is an interesting yet difficult business. I sort of stumbled into the world by chance. In this post I want to share some of my learnings.&lt;/p&gt;
&lt;p&gt;Long story short I wrote a little &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;Webpack cookbook&lt;/a&gt; with &lt;a href=&quot;http://www.christianalfoni.com/&quot;&gt;Christian Alfoni&lt;/a&gt;. That led to an idea of a bigger book. Initially we pitched that to a real publisher. After long negotiations we got a no. That didn&amp;apos;t stop me. You can see the result here.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#growing-pains&quot; id=&quot;growing-pains&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Growing Pains&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#growing-pains&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though the book hasn&amp;apos;t been a great financial success, it has proven its benefits. There are multiple reasons for this. For instance having all your content open might not be the best idea for a beginner author unless you have some way to upsell. This is something I&amp;apos;m going to experiment with to see if having at least some of the content closed makes a difference.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#tackling-big-problems-by-yourself&quot; id=&quot;tackling-big-problems-by-yourself&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Tackling Big Problems by Yourself&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#tackling-big-problems-by-yourself&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am aware a lot of beginner authors do a lot worse than me. The problem is that when you are starting out alone, you have to tackle big problems by yourself. Simply put even if you could write but fail at other important tasks, such as marketing and sales, it won&amp;apos;t work. If you wrote an excellent book and people failed to find it, it would still be a failure, at least financially.&lt;/p&gt;
&lt;p&gt;Note that you can, and probably should, outsource some of the book related tasks. You can find people to proofread your material for relatively cheap. Even if the reader knows nothing about the topic, you will likely get a bunch of grammar fixes to make. Same goes for crafting landing pages, marketing material and graphics. A professional can simply do better work, faster.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#extra-challenge-for-non-natives&quot; id=&quot;extra-challenge-for-non-natives&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Extra Challenge for Non-natives&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#extra-challenge-for-non-natives&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a non-native author you&amp;apos;ll encounter an extra challenge in the form of grammar. As a Finn I tend to be quite blind at articles. I miss some at times. My writing style has likely been inspired by my culture as well. That&amp;apos;s something that&amp;apos;s hard to tone down. On the other hand that can be treated as a strength. Sometimes it&amp;apos;s good to be a little different and stand out.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#royalties&quot; id=&quot;royalties&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Royalties&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#royalties&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a first time author going through an established publisher could be a good option. They&amp;apos;ll deal with some of the hard parts. You will pay for this quite literally, though. And there are no guarantees for success. At least this will make you familiar with the process. When you decide to self-publish, you already know some of the ropes. As a result you aren&amp;apos;t starting from the scratch anymore.&lt;/p&gt;
&lt;p&gt;The economics of self-publishing can be more rewarding. There are more aspects to worry about but the economics make up for that. Roughly put you might need to sell six times the books through a real publisher than otherwise. This means you can reach decent income even with modest sales.&lt;/p&gt;
&lt;p&gt;To give you a better idea, consider the figures below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traditional publisher - 15-50% royalty, closer to 15% normally and can be less even&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/&quot;&gt;Leanpub&lt;/a&gt; - $0.50 + 10%&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gumroad.com/&quot;&gt;Gumroad&lt;/a&gt; - $0.25 + 5%&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://getdpd.com/&quot;&gt;DPD&lt;/a&gt; - $10 per month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shortly, the more responsibility you take, the more you get paid for it. But this assumes you can deal with all the parts involved. Having a great royalty rate doesn&amp;apos;t help if the book doesn&amp;apos;t sell.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#leanpub-vs-alternatives&quot; id=&quot;leanpub-vs-alternatives&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Leanpub vs. Alternatives&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#leanpub-vs-alternatives&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Especially with something like DPD you would be raking most of the profit to yourself. But as stated earlier, the cost is usually elsewhere. The benefit of Leanpub is that they offer a decent landing page for your book and support Markdown based authoring.&lt;/p&gt;
&lt;p&gt;One potential problem is that you don&amp;apos;t get direct access to your clients. This makes it more difficult to grow your personal mailing list than it would have to be. There are likely good reasons for this, though.&lt;/p&gt;
&lt;p&gt;It is hard to underestimate the importance of a good mailing list. It is an amazing way to reach your audience. There are an entire set of techniques related to growing them. I am not an expert when it comes to mailing lists but I can see the value. Beyond marketing they actually allow you to help your audience directly, get feedback and so on.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#control-over-output&quot; id=&quot;control-over-output&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Control over Output&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#control-over-output&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can get output similar to Leanpub through something like &lt;a href=&quot;https://www.gitbook.com/&quot;&gt;Gitbook&lt;/a&gt;. If you have the skills for that, you can customize the result as you want. You can sell the result through Gumroad, DPD and such. You will get more control over the sales process and can set up the sales funnel just the way you want it. I believe growing your mailing list becomes easier this way.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#benefits-of-a-proxy&quot; id=&quot;benefits-of-a-proxy&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Benefits of a Proxy&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#benefits-of-a-proxy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I feel selling is one of the smallest problems, especially if you go through a proxy. If you deal with it yourself, you will have to deal with things like EU VAT. That will get very complex and time consuming fast. It is likely a better idea to leave these kind of details to companies that have them sorted out.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#going-dead-tree-and-beyond&quot; id=&quot;going-dead-tree-and-beyond&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Going Dead Tree and Beyond&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#going-dead-tree-and-beyond&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Note that services like &lt;a href=&quot;https://www.lulu.com/&quot;&gt;Lulu&lt;/a&gt; allow you to get actual dead tree books done. The obvious disadvantage of this is that it becomes difficult to push updates. Lulu also gives access to major digital bookshops, such as Amazon, B&amp;amp;N and iBooks. This means you&amp;apos;ll need to have your book content fixed apart from grammatical fixes, though, as these platforms expect your book has an ISBN.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#potential-benefits&quot; id=&quot;potential-benefits&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Potential Benefits&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#potential-benefits&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Financial success is only one potential benefit of writing a book. It will actually force you to become better at writing. Even though I&amp;apos;m far from top notch writers, I feel like my writing has improved. At least I&amp;apos;m faster at it, and it takes less effort. In addition I have gained contacts I wouldn&amp;apos;t have otherwise. And, most importantly, writing a book has opened an entire new world to me in the form of opportunities.&lt;/p&gt;
&lt;p&gt;Even in the worst case I have established a source of some level of income. The book seems to sell consistently and I have some tricks in my sleeve to improve on that. Better yet, I have made a dent to the market. It will be far easier to develop another book should I want to.&lt;/p&gt;
&lt;p&gt;Having a book in your CV doesn&amp;apos;t hurt either. The next time I do a round of interviews, I have an ace at sleeve. A book adds to your credibility and might be the factor that will help you to get the job. At the very least you will have a stronger bargaining position when negotiating over the financial bits.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-would-i-do-differently-&quot; id=&quot;what-would-i-do-differently-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Would I Do Differently?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-would-i-do-differently-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like with software projects the easiest thing to mess up is scoping. It&amp;apos;s difficult to estimate how long getting things done actually takes. This is exacerbated by the fact that as a first time author you don&amp;apos;t have a frame of reference. Based on this experience I would say it&amp;apos;s better to aim for a short guide, say 30-50 pages, rather than shoot for the moon on the first go.&lt;/p&gt;
&lt;p&gt;It is easier to expand than to cut down. Go for a short, quality book rather than something long and shoddy. Your readers will thank you.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#experiment-at-moderation&quot; id=&quot;experiment-at-moderation&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Experiment at Moderation&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#experiment-at-moderation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One interesting aspect of self-publishing is that it allows a wide range of experimentation. I probably went too far with that at some points. Instead it might be a good idea to try to fix your table of contents as soon as possible. This is just to avoid the amount of rework needed. Sometimes there&amp;apos;s no way to avoid that but as they say &amp;quot;fail to plan, plan to fail&amp;quot;.&lt;/p&gt;
&lt;p&gt;Ideally you wouldn&amp;apos;t have to iterate a lot on the content. I know this sounds like waterfall. It&amp;apos;s easier from a reader&amp;apos;s perspective, though. If nothing is ever done, how do you know when to read? At some point a book has to become ready. Editions are ideal for bigger changes. That&amp;apos;s the way the ISBN system has been designed.&lt;/p&gt;
&lt;p&gt;You could say there&amp;apos;s an interesting conflict between the need to move fast and the need for a stable result. Platforms, such as Leanpub or Gumroad, allow this sort of experimentation. As your book grows, it doesn&amp;apos;t hurt to become more conservative in your approach. For instance I&amp;apos;ve made conscious effort to move towards a more stable release cycle.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#shifting-topics&quot; id=&quot;shifting-topics&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Shifting Topics&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#shifting-topics&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the big challenges of being a technical author is that the scene changes all the time. If I started to write my book right now, I would perhaps choose some technologies covered a little differently. Especially in front-end development even a month is a long time. That puts extra pressure on both authors and readers.&lt;/p&gt;
&lt;p&gt;It can be hard to accept that your book is obsolete in some ways as soon as you publish it. That&amp;apos;s something for technical authors to endure.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#subscription-based-books-&quot; id=&quot;subscription-based-books-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Subscription Based Books?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#subscription-based-books-&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://commonsware.com/Android/&quot;&gt;The Busy Coder&amp;apos;s Guide to Android Development&lt;/a&gt; is an interesting alternative to the common approach. The author is selling his book as a subscription service. It&amp;apos;s a massive book, over 3,300 pages. Subscription would give you access to the newest content.&lt;/p&gt;
&lt;p&gt;From business point of view recurring income is one of the greatest things you can achieve. The problem with traditional sales is that it&amp;apos;s one-off. If you want more income from the same client, you would have to sell another offering or try to upsell your current offering in some way. You could for instance try to produce a video course or sell personal consulting to complement your base offering.&lt;/p&gt;
&lt;p&gt;A subscription based approach is more involved. It implies the need for continuous work. I believe that can work when scaled to a sufficient volume. As always, the problem for first time authors is in reaching that critical mass required to make it work.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#open-vs-closed&quot; id=&quot;open-vs-closed&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Open vs. Closed&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#open-vs-closed&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I went for an open approach in my first effort. The greatest advantage of this has been an immense amount of visibility. Of course translating that to sales is another story. If I started now, I would likely start with a mixed approach. Have something valuable behind a paywall to encourage sales. Perhaps a part of the content could be exclusive to the paid version only. Some keep all of the content closed.&lt;/p&gt;
&lt;p&gt;There&amp;apos;s likely no one right answer to this question. As the content has been available in an open format, that has enabled external contributions I would have missed otherwise. Given I&amp;apos;m a solo author, that has been a massive help. Now everyone gets a better book. This is something I am very happy about.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though publishing a technical book is surprisingly simple, actually succeeding at it is another story. There are a lot of things that could go wrong. Don&amp;apos;t get discouraged, though. I believe that persistency, and the willingness to learn and adapt, will yield results at some point. Very few succeed with their first book anyway. So be prepared for another.&lt;/p&gt;
</content></entry><entry ><title >SurviveJS - Webpack and React v1.7.5</title><id >asurvivejswebpackandreactv1752015-08-30t00:00:00+03:00</id><link href="http://survivejs.com/blog/survivejs-175"></link><updated >2015-08-30T00:00:00+03:00</updated><content type="html">&lt;p&gt;Onwards we go. &lt;code&gt;v1.7.5&lt;/code&gt; can be characterized as a refinement release. I went through &amp;quot;React and Flux&amp;quot; and &amp;quot;From Notes to Kanban&amp;quot; with my editor (thanks Jes&amp;#xFA;s!). As a result we should have something that&amp;apos;s a notch better together. I took some decompression time during this iteration and negotiated a lot towards a better future I hope.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#book-improvements-v1-7-5-&quot; id=&quot;book-improvements-v1-7-5-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;v1.7.5&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#book-improvements-v1-7-5-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 116 commits went to &lt;code&gt;v1.7.5&lt;/code&gt;. To make it easier to follow what happened and where, I&amp;apos;ve split up the changes below.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.7.0...v1.7.5&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#general-fixes&quot; id=&quot;general-fixes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;General Fixes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#general-fixes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I learned something curious about &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;an&lt;/em&gt; (no, we don&amp;apos;t have these things in Finnish). It is important to remember to take in count what the words &lt;strong&gt;sound&lt;/strong&gt; like.&lt;/li&gt;
&lt;li&gt;Use nicer formatting for &lt;code&gt;npm i&lt;/code&gt; bits. Now &lt;code&gt;--&lt;/code&gt; shouldn&amp;apos;t get mangled.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#introduction&quot; id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#introduction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The introduction of the book has been expanded somewhat. There&amp;apos;s only one chance to make a first impression so might as well try to do a good one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#webpack-compared&quot; id=&quot;webpack-compared&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Webpack Compared&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#webpack-compared&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added an expanded explanation for &lt;code&gt;make&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&quot;http://jspm.io/&quot;&gt;JSPM&lt;/a&gt;. You should watch &lt;a href=&quot;https://www.youtube.com/watch?t=33&amp;amp;v=iukBMY4apvI&quot;&gt;Glen Maddern&amp;apos;s&lt;/a&gt; awesome demo about it. It wouldn&amp;apos;t surprise me a lot if JSPM had a bright future.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#developing-with-webpack&quot; id=&quot;developing-with-webpack&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing with Webpack&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#developing-with-webpack&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Highlighted the importance of a proper &lt;code&gt;.gitignore&lt;/code&gt;. I&amp;apos;ve seen some people to neglect this so I felt it&amp;apos;s good to cover. It&amp;apos;s just one of those things that saves your nerves. :)&lt;/li&gt;
&lt;li&gt;Dropped &lt;code&gt;colors: true&lt;/code&gt; setting from &lt;code&gt;devServer&lt;/code&gt; configuration. Reading from source I learned that &lt;code&gt;webpack-dev-server&lt;/code&gt; actually detects for terminal colors automatically. As a result this bit of configuration can be dropped.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#implementing-a-basic-note-application&quot; id=&quot;implementing-a-basic-note-application&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing a Basic Note Application&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#implementing-a-basic-note-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pushed &lt;code&gt;notes&lt;/code&gt; definition outside of the &lt;code&gt;App&lt;/code&gt; component. This cleans up the implementation a little.&lt;/li&gt;
&lt;li&gt;Added screenshots to show what you should see after each visual step.&lt;/li&gt;
&lt;li&gt;Expanded the explanation of &lt;code&gt;super()&lt;/code&gt;. Remember that it refers to the method of the parent class.&lt;/li&gt;
&lt;li&gt;Improved the visual outlook of the add button.&lt;/li&gt;
&lt;li&gt;Made sure note tasks get assigned &lt;code&gt;display: inline-block;&lt;/code&gt; to force a minimum height to them even if there&amp;apos;s no content at all. This way they can be edited even then.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#react-and-flux&quot; id=&quot;react-and-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React and Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#react-and-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clarified &lt;em&gt;Gluing It All Together&lt;/em&gt; section a lot.&lt;/li&gt;
&lt;li&gt;Pushed &lt;em&gt;Dispatching in Alt&lt;/em&gt; to the end. I&amp;apos;ve settled for a convention where the main content should be about getting ahead with the application whereas these sort of good to know things have been pushed to the end.&lt;/li&gt;
&lt;li&gt;Dropped redundant &lt;code&gt;this.notes = this.notes || [];&lt;/code&gt; check. This won&amp;apos;t be needed so it can be safely dropped. The same goes for bootstrapped data in general. It just works.&lt;/li&gt;
&lt;li&gt;Clarified and expanded &lt;em&gt;What Are Decorators?&lt;/em&gt; and added an example showing how to implement &lt;code&gt;@log&lt;/code&gt; for logging how methods are called.&lt;/li&gt;
&lt;li&gt;Reworked &lt;em&gt;Using &lt;code&gt;AltContainer&lt;/code&gt; Instead of a Decorator&lt;/em&gt; for clarity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#from-notes-to-kanban&quot; id=&quot;from-notes-to-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;From Notes to Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#from-notes-to-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added screenshots to illustrate progress.&lt;/li&gt;
&lt;li&gt;Reworked &lt;em&gt;Modeling Lane&lt;/em&gt; for clarity.&lt;/li&gt;
&lt;li&gt;Reworked &lt;em&gt;Making Lanes Responsible of Notes&lt;/em&gt; for clarity.&lt;/li&gt;
&lt;li&gt;Push &lt;code&gt;addNote&lt;/code&gt; and &lt;code&gt;deleteNote&lt;/code&gt; &lt;code&gt;bind&lt;/code&gt;s to &lt;code&gt;constructor&lt;/code&gt; level. Logically &lt;code&gt;Lane&lt;/code&gt; id remains the same during its lifecycle so this seemed like a safe change to make.&lt;/li&gt;
&lt;li&gt;Highlighted important code changes using bullet points.&lt;/li&gt;
&lt;li&gt;Added a section known as &lt;em&gt;On Namespacing Components&lt;/em&gt;. This is a small technique you may find handy. It allows you to model cleaner component APIs so it&amp;apos;s worth knowing.&lt;/li&gt;
&lt;li&gt;Added missing &lt;code&gt;get&lt;/code&gt; to &lt;code&gt;NoteStore&lt;/code&gt;. While at it I bummed a couple of lines of code from it. Now it&amp;apos;s as compact as it can get.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#implementing-drag-and-drop&quot; id=&quot;implementing-drag-and-drop&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Implementing Drag and Drop&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#implementing-drag-and-drop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reworked introduction.&lt;/li&gt;
&lt;li&gt;Reworked &lt;em&gt;Preparing Notes to Be Sorted&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Pushed &lt;code&gt;ItemTypes&lt;/code&gt; to &lt;code&gt;&amp;apos;../libs/item_types&amp;apos;&lt;/code&gt; as it&amp;apos;s not a component.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be doing more work on this chapter to make it clearer still.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#building-kanban&quot; id=&quot;building-kanban&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Building Kanban&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#building-kanban&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added more context to the code examples to make them clearer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#authoring-libraries&quot; id=&quot;authoring-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Authoring Libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#authoring-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Made sure &lt;code&gt;preversion&lt;/code&gt; hook &lt;code&gt;git commit&lt;/code&gt; takes &lt;code&gt;--allow-empty&lt;/code&gt; to allow empty distribution commits to be made.&lt;/li&gt;
&lt;li&gt;Dropped redundant version related tip as &lt;code&gt;preversion&lt;/code&gt; hook does everything we need now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#styling-react&quot; id=&quot;styling-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Styling React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#styling-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded on CSS Modules and linked to &lt;a href=&quot;https://github.com/gajus/react-css-modules&quot;&gt;gajus/react-css-modules&lt;/a&gt; as that makes it more convenient to work with them in React.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;apos;ll continue going through the content with my editor while listening to your feedback. I&amp;apos;m particularly interested in &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues/224&quot;&gt;highlighting updated lines&lt;/a&gt; as that would make it easier to follow what lines of code changed during the tutorial. I believe resolving this could help to push the book quality a notch further.&lt;/p&gt;
&lt;p&gt;Now that the content is getting solid this means I can spend more time on producing new content. I&amp;apos;ll be focusing on typing next. Also some other plans have been put to motion but more on those later.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think this was yet another good step towards a quality release at Amazon. Thanks for everyone involved! You make it worthwhile. :)&lt;/p&gt;
&lt;p&gt;I hope you enjoy this release. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry ><title >Mobservable - Reactive React - Interview with Michel Weststrate</title><id >amobservablereactivereactinterviewwithmichelweststrate2015-08-19t00:00:00+03:00</id><link href="http://survivejs.com/blog/mobservable-interview"></link><updated >2015-08-19T00:00:00+03:00</updated><content type="html">&lt;p&gt;As React deals only with the view layer you will often have to complement it with something else. &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux architecture&lt;/a&gt; is one answer but not the only one. &lt;a href=&quot;https://mweststrate.github.io/mobservable/&quot;&gt;Mobservable&lt;/a&gt; by &lt;a href=&quot;https://github.com/mweststrate&quot;&gt;Michel Weststrate&lt;/a&gt; is a refreshing alternative. But what is it really about?&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#can-you-tell-something-about-yourself-michel-how-did-you-discover-react-&quot; id=&quot;can-you-tell-something-about-yourself-michel-how-did-you-discover-react-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Can you tell something about yourself Michel? How did you discover React?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#can-you-tell-something-about-yourself-michel-how-did-you-discover-react-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;span class=&quot;author&quot;&gt;
  &lt;img src=&quot;https://www.gravatar.com/avatar/bdbeb02a7fe50b769e67e0c076b33c54?size=100&quot; alt=&quot;Michel Weststrate&quot; class=&quot;author&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;
&lt;/span&gt;
I&amp;apos;m a lead developer at Mendix where I worked on both frontend and backend development. About half a year ago me and my team started working on a greenfield,  enterprise scale project where most of the complexity is on the client side. We started a small research project to find the right technology and looked into Angular, Ember and React.
&lt;/p&gt;

&lt;p&gt;React was definitely the one that did enlighten us the most. Its mental model is really simple, it has a clearly defined scope and it is convenient to write.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-drove-you-to-develop-mobservable-why-not-to-just-stick-with-flux-&quot; id=&quot;what-drove-you-to-develop-mobservable-why-not-to-just-stick-with-flux-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What drove you to develop Mobservable? Why not to just stick with Flux?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-drove-you-to-develop-mobservable-why-not-to-just-stick-with-flux-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Performance and code simplicity are both very important values in our project. Performance because we have to draw hundreds of different, moving components at 50fps. Code simplicity because we have about 400 different domain concepts to cover, so all our components should be really DRY. An always-re-render-everything approach results in very simple code. But it doesn&amp;apos;t cut it in terms of performance.&lt;/p&gt;
&lt;p&gt;With most Flux implementations, it really seems that to achieve performance you have to give up code simplicity. Immutable data is often presented as the way to go here. Yet it results in verbose controller (store) functions and forces you to do reference management yourself.&lt;/p&gt;
&lt;p&gt;With mutable data structures, it is trivial to guarantee that there is only one version of a certain domain object in memory. So you never have to worry whether you leaked an old reference. With immutable data, pointer equality guarantees structural equality. Which is nice in terms of optimizations and history. Yet with mutable data, pointer equality means that you are looking at conceptually the same (and latest) thing.&lt;/p&gt;
&lt;p&gt;So our goal for Mobservable is: Be able to write components that look like they are always fully rendered. Without needing nifty things like cursors or store subscriptions. To achieve DRY: the render function is the dependency tree, and nothing else. For our model and controller code we wanted to be able to write vanilla JS code as much as possible. Be able to use the mutable arrays and objects, cyclic data-structures and classes. I think Mobservable achieves these goals.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mobservable-can-work-with-flux&quot; id=&quot;mobservable-can-work-with-flux&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Mobservable can work &lt;strong&gt;with&lt;/strong&gt; Flux&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#mobservable-can-work-with-flux&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is actually funny that you present Mobservable as an alternative to Flux. Mobservable can be combined with most Flux implementations. But I heard indeed from several people that they dropped Flux after starting to use Mobservable in their project.&lt;/p&gt;
&lt;p&gt;I think the issue with Flux is that it is very obtrusive to your code base. If you use React and Flux together, it impacts your whole codebase. While just React nicely separates the concerns of view and &amp;apos;the rest&amp;apos;. With Flux frameworks you go all-in. That introduces new problems like: &amp;apos;how do I do async actions&amp;apos; and &amp;apos;my actions need to go through the stores in a certain order&amp;apos;.&lt;/p&gt;
&lt;p&gt;That makes me wonder: Did you have these questions when building vanilla JavaScript applications? What do you get in return from Flux? I think most things offered by Flux can also be achieved by disciplined programming. Stuff like uni-directional flow and making it clear where your state lives.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-frameworks-vs-libraries&quot; id=&quot;on-frameworks-vs-libraries&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;On frameworks vs. libraries&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#on-frameworks-vs-libraries&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At Mendix we are pretty reluctant to use all-in frameworks. The first two years they serve you really well. But the third year they cannot longer keep up the pace with new technologies. The fourth year you spent refactoring just be able to adopt new technologies.&lt;/p&gt;
&lt;p&gt;We have learned from that, so Mobservable tries to be as unobtrusive as possible. Less obtrusive than frameworks that use immutables, cursors or reactive streams. So that you have a great deal of flexibility in how you structure your controller, view and model code (or actions and stores).&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-are-your-next-steps-how-do-you-plan-to-develop-mobservable-further-&quot; id=&quot;what-are-your-next-steps-how-do-you-plan-to-develop-mobservable-further-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What are your next steps? How do you plan to develop Mobservable further?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-are-your-next-steps-how-do-you-plan-to-develop-mobservable-further-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mobservable is all about updating views on your data automatically. People often interpret views as &amp;apos;user interface&amp;apos; and this plays a central role indeed in the React integration. But reactive data is really convenient for backend integration as well.&lt;/p&gt;
&lt;p&gt;At our project we do not only use Mobservable to update the user interface, but also to create a changelog that is sent to the backend server. Both are just views on the same data. I hope to get this idea more clear and to find some nice convenience methods that hints users in this direction.&lt;/p&gt;
&lt;p&gt;Soon, Mobservable will include a way to visualize all the relations between state and views. This will provide great insight in the actual flow of state through your application.&lt;/p&gt;
&lt;p&gt;And maybe I should write some Flux thingy around Mobservable and React. Because either people seem to think you need to Flux in order to properly React. Or they just love to be guided in how to setup each part of their application.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot; id=&quot;what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What does the future look like for React? Can you see any particular trends?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-does-the-future-look-like-for-react-can-you-see-any-particular-trends-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think React has a brighter future than Angular. Simply because you aren&amp;apos;t stuck with a full fledged framework that you have to obey, or it will work against you. But React has to keep an ecosystem that prefers composition of micro libraries over all-in-one solutions.&lt;/p&gt;
&lt;p&gt;This is also the reason that small editors like Sublime and Atom in combination with standalone build tools like Grunt and Gulp are now more popular than feature creeped IDEs (I think, I don&amp;apos;t have any numbers on that).&lt;/p&gt;
&lt;p&gt;No framework lives forever. So if you want to make sure your software outlives your frameworks, you have to be able to replace your libraries one by one. One day you will wake up to discover that browsers are fast enough to re-calculate your whole application on each state change. Then you just remove Mobservable and everything will work just the same as the day before without a major refactoring.&lt;/p&gt;
&lt;p&gt;I&amp;apos;m very interested to see what Relay will do in this regard. Because from a bird&amp;apos;s eye view it seems to increase the coupling between view, controller and backend. Making it much harder to replace any of these parts.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#who-should-i-interview-next-&quot; id=&quot;who-should-i-interview-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Who should I interview next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#who-should-i-interview-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dan Abramov, his &lt;a href=&quot;https://github.com/gaearon/redux&quot;&gt;redux&lt;/a&gt; is the only &amp;apos;Flux implementation&amp;apos; I could see myself using. It is not unobtrusive if you are coming from the mutable world, but the mental model of redux is beautiful and the dev tools are fun. I can imagine it works really well in (at least) medium sized applications.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for the interview Michel! It was certainly enlightening. We ported the book &lt;a href=&quot;https://github.com/survivejs/mobservable-demo&quot;&gt;Notes and Kanban examples to Mobservable&lt;/a&gt;. Check out the source to see how this worked out. Compared to the original I was definitely positively surprised. Mobservable seems like a good fit for these problems. You can play around with Mobservable online by taking the &lt;a href=&quot;https://mweststrate.github.io/mobservable/getting-started.html&quot;&gt;five minute, interactive introduction to Mobservable + React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Michel goes into more detail at &lt;a href=&quot;https://www.mendix.com/tech-blog/making-react-reactive-pursuit-high-performing-easily-maintainable-react-apps/&quot;&gt;his post about making React reactive&lt;/a&gt;. So if this article piqued your interest that might be a worthwhile read. Of course you can just hop into the &lt;a href=&quot;https://github.com/mweststrate/react-mobservable-boilerplate&quot;&gt;mobservable boilerplate&lt;/a&gt; and proceed from there.&lt;/p&gt;
</content></entry><entry ><title >SurviveJS - Webpack and React v1.7</title><id >asurvivejswebpackandreactv172015-08-16t00:00:00+03:00</id><link href="http://survivejs.com/blog/survivejs-17"></link><updated >2015-08-16T00:00:00+03:00</updated><content type="html">&lt;p&gt;I skipped doing a public post for &lt;code&gt;v1.6&lt;/code&gt; as I was too tired (berry season is taxing). Now I&amp;apos;m going to give you release notes for both &lt;code&gt;v1.6&lt;/code&gt; and &lt;code&gt;v1.7&lt;/code&gt; at once. I have also some news of the future plans. So stay tuned.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#development-model-changes&quot; id=&quot;development-model-changes&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Development Model Changes&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#development-model-changes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;apos;ve moved to a staged development model. Now I maintain &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;dev&lt;/code&gt; branches. &lt;code&gt;master&lt;/code&gt; contains the current stable release. All development happens at &lt;code&gt;dev&lt;/code&gt;. This way the code examples stay in sync with the book and the site. Less frustration and a better book for everyone. If you have PRs in mind, please make them against &lt;code&gt;dev&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#book-improvements-v1-6-&quot; id=&quot;book-improvements-v1-6-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;v1.6&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#book-improvements-v1-6-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In total 63 commits went to &lt;code&gt;v1.6&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some typo fixes were made. A lot more follow in &lt;code&gt;v1.7&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt; configuration was pushed to &lt;code&gt;webpack.config.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Noted that &lt;code&gt;webpack.config.babel.js&lt;/code&gt; works. I&amp;apos;ve expanded on this at &lt;code&gt;v1.7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A lot of effort went into making &lt;em&gt;Implementing a Basic Note Application&lt;/em&gt; easier to approach&lt;/li&gt;
&lt;li&gt;Dropped custom &lt;code&gt;findIndex&lt;/code&gt;. In &lt;code&gt;v1.7&lt;/code&gt; I went further and now it uses &lt;a href=&quot;https://www.npmjs.com/package/array.prototype.findindex&quot;&gt;array.prototype.findindex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added imagery to &lt;em&gt;React and Flux&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Mentioned that &lt;code&gt;-S&lt;/code&gt; and &lt;code&gt;-D&lt;/code&gt; map to &lt;code&gt;npm i --save&lt;/code&gt; and &lt;code&gt;npm i --save-dev&lt;/code&gt;. This is just for you keyboard jockeys out there.&lt;/li&gt;
&lt;li&gt;Added the book subtitle to the cover. It looked strange without.&lt;/li&gt;
&lt;li&gt;Formatted all &lt;code&gt;npm i&lt;/code&gt; parts so that they stand out better. The web version uses special formatting reminiscent of a real terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.5.0...v1.6.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#book-improvements-v1-7-&quot; id=&quot;book-improvements-v1-7-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements - &lt;code&gt;v1.7&lt;/code&gt;&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#book-improvements-v1-7-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;108 commits went to &lt;code&gt;v1.7&lt;/code&gt;. So based on numbers it was busier. Especially the early part of the week was good. After that it was all berries and mushrooms for me. It&amp;apos;s the season after all and Winter is coming.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A massive amount of typo and grammar fixes were made in this iteration. I tried my luck with Fiverr and it paid off seriously. Thank you Ava and Nancy! There might be some left still but we squashed quite a few. I also ran the content through &lt;a href=&quot;http://www.hemingwayapp.com/&quot;&gt;Hemingway&lt;/a&gt; to simplify sentence structures where needed.&lt;/li&gt;
&lt;li&gt;I managed to make &lt;em&gt;webpack.config.js&lt;/em&gt; &lt;code&gt;TARGET&lt;/code&gt; selection cross-platform. Now the configuration relies on &lt;code&gt;process.env.npm_lifecycle_event&lt;/code&gt;. npm sets that during execution and we can rely on that. Thanks Hector for pointing me to the right direction!&lt;/li&gt;
&lt;li&gt;Clarified point about &lt;code&gt;eval&lt;/code&gt;. As it happens Webpack provides multiple &lt;a href=&quot;https://webpack.github.io/docs/configuration.html#devtool&quot;&gt;devtool&lt;/a&gt; options. I suggest &lt;code&gt;eval-source-map&lt;/code&gt; for development in small projects. You can try faster, lower quality options with bigger projects.&lt;/li&gt;
&lt;li&gt;Noted that it&amp;apos;s possible to exit Node.js repl using &lt;code&gt;CTRL-D&lt;/code&gt; instead of &lt;code&gt;CTRL-C&lt;/code&gt;. Thanks to Ahmed for pointing this out!&lt;/li&gt;
&lt;li&gt;Improved Kanban project naming (consistent with CRUD) overall. Now it should read a little better. I also pushed reference related logic to a store method. It&amp;apos;s nicer but still a lot of code considering what it actually does. As long as we operate through indices like this, there&amp;apos;s no neat way around it.&lt;/li&gt;
&lt;li&gt;Showed how to set up isomorphic rendering for the Kanban application. It&amp;apos;s not that useful in this case. I do hope you get the idea as it&amp;apos;s powerful.&lt;/li&gt;
&lt;li&gt;Dropped deployment chapter. As I managed to explain isomorphic rendering earlier in the previous point, the deployment chapter became redundant. Good riddance.&lt;/li&gt;
&lt;li&gt;Added JSX suffixes to imports. As the project gets run through Node.js context when rendering in an isomorphic way, I had to add JSX suffixes. Perhaps someone knows a better solution but this made sense at the time.&lt;/li&gt;
&lt;li&gt;Pushed id creation inside stores. The reasoning for this is that if you are dealing with a real back-end, that&amp;apos;s the way it goes. You should &lt;em&gt;never&lt;/em&gt; have to think about ids at view level so it&amp;apos;s better to do it right. Besides now gluing a real back-end with the project is a notch easier.&lt;/li&gt;
&lt;li&gt;Reworked the early part of the Flux chapter with my editor (thanks Jes&amp;#xFA;s!). The chapter can likely still be improved but it&amp;apos;s better now. It&amp;apos;s a little long to my tastes but on the other hand it covers a lot of ground.&lt;/li&gt;
&lt;li&gt;Ended up using term &lt;em&gt;Webpack&lt;/em&gt; everywhere. I know &lt;em&gt;webpack&lt;/em&gt; is the correct name but I went for consistency here. So consider that &amp;quot;Webpack&amp;quot; == &amp;quot;webpack&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to get some screenshots done for this iteration too and work on a Leanpub exclusive chapter. This work will go to the next iteration. The good news are that now there&amp;apos;s far less to worry about so I&amp;apos;m more likely to get these tasks done.&lt;/p&gt;
&lt;p&gt;You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.6.0...v1.7.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Fail to plan, plan to fail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems to me the book is on a good track and we&amp;apos;re making steady progress. New people are finding the book and even buying it. And the feedback has been good. I know the book isn&amp;apos;t everyone&amp;apos;s piece of cake. But I&amp;apos;m okay with that. By trying to please everyone you please none.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#going-amazon&quot; id=&quot;going-amazon&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Going Amazon&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#going-amazon&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next major goal for me is to get the book to Amazon, iBooks and such through &lt;a href=&quot;https://www.lulu.com/&quot;&gt;Lulu&lt;/a&gt;. This might also provide us a paper version if there&amp;apos;s demand. Enhanced distribution could go a long way in improving sales. After all I&amp;apos;ll need to make this work financially in order to be able to write more.&lt;/p&gt;
&lt;p&gt;For this to happen we&amp;apos;ll need to lock the scope of the book. This is due to ISBN requirements. You can make small changes to a published book but nowhere on the level what we&amp;apos;re doing right now.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#but-there-s-more-technology-to-cover&quot; id=&quot;but-there-s-more-technology-to-cover&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;But There&amp;apos;s More Technology to Cover&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#but-there-s-more-technology-to-cover&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I know interesting new technology, such as &lt;a href=&quot;https://github.com/rackt/redux&quot;&gt;redux&lt;/a&gt;, keeps on coming out all the time. The problem is that if I keep on changing the newest cool thing I will never get a stable version out. It is far better idea to lock the scope and cover the interesting things through the blog.&lt;/p&gt;
&lt;p&gt;This gives me a more flexible way to try out various ideas before committing them to a book. It also helps to give the current work some visibility it sorely needs.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-current-plan&quot; id=&quot;the-current-plan&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;The Current Plan&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#the-current-plan&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a result the current plan is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continue iterating on the current content based on feedback. No major changes to the chapter structure anymore, just minor tweaks to make the book more approachable.&lt;/li&gt;
&lt;li&gt;Write chapters that are unique for the commercial edition. This improves the value proposition and actually might encourage more people to buy the book. After all, that enables more content! I expect at least three chapters.&lt;/li&gt;
&lt;li&gt;Expand this blog with supporting topics. I have a nice series of posts planned up and I welcome ideas. I want more people to discover the book and this could go a long way towards that.&lt;/li&gt;
&lt;li&gt;Figure out how Hacker News works. I did try &lt;em&gt;Show HN&lt;/em&gt; but received zero response. Perhaps I&amp;apos;ll have better luck next time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So towards the Amazon release I go. It might be interesting to try running some sort of campaign to eventually open the unique content. For now I will need to let the commercial version to have some leverage over the community edition. Perhaps there&amp;apos;s a way to align these two goals (community content, making a living) but as for now this might be the way.&lt;/p&gt;
&lt;p&gt;I will be able to tell a lot more after a wider scale release. Given I&amp;apos;m a first time author I&amp;apos;m still learning the ropes here and no doubt making a lot of mistakes in the process. I have other book ideas but I&amp;apos;ll have to get this first one out before I can even think about those. Perhaps within a year or so I can do an expanded second edition. Any sooner and I&amp;apos;m pissing off my first edition readers. :)&lt;/p&gt;
&lt;p&gt;I hope you enjoy this release. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome. It&amp;apos;s interesting to write a book this way. That&amp;apos;s for sure.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry ><title >A Quick Look at React Books</title><id >aaquicklookatreactbooks2015-08-01t00:00:00+03:00</id><link href="http://survivejs.com/blog/react-books"></link><updated >2015-08-01T00:00:00+03:00</updated><content type="html">&lt;p&gt;As an author I like to keep an eye on the market. You have to know who you are against after all! It&amp;apos;s not an understatement to say could that it&amp;apos;s about to get swarmed with books. In this post I&amp;apos;ll go through the ones I could find and provide you some intel on them. Perhaps you would like to get a couple of books to your collection!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#free-books&quot; id=&quot;free-books&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Free Books&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#free-books&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though there are &lt;a href=&quot;https://github.com/enaqx/awesome-react&quot;&gt;a lot of freely available React resources&lt;/a&gt; there aren&amp;apos;t too many free books yet.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#survivejs-webpack-and-react&quot; id=&quot;survivejs-webpack-and-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;SurviveJS - Webpack and React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#survivejs-webpack-and-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://survivejs.com/&quot;&gt;SurviveJS - Webpack and React&lt;/a&gt; is the most comprehensive freely available book I&amp;apos;m aware of. It will show you how to set up a &lt;a href=&quot;https://webpack.github.io/&quot;&gt;webpack&lt;/a&gt; based development environment and then develop a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Kanban&quot;&gt;Kanban&lt;/a&gt; based on it. More theoretical topics, such as linting, styling and library authoring are discussed as well. At the time of writing it has 150 pages and more content is planned based on demand.&lt;/p&gt;
&lt;p&gt;The book is open to external contributions and in fact a lot of people have contributed feedback and fixes. From author&amp;apos;s point of view this has been just awesome!&lt;/p&gt;
&lt;p&gt;If you like the book and want to support the effort, &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;buying a copy&lt;/a&gt; would most likely make the author&amp;apos;s day. Suggested price without VAT is $20. Pay based on value you perceive as Leanpub books allow.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#react-webpack-cookbook&quot; id=&quot;react-webpack-cookbook&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Webpack Cookbook&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#react-webpack-cookbook&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;React Webpack Cookbook&lt;/a&gt; is a little guide I developed with &lt;a href=&quot;http://www.christianalfoni.com/&quot;&gt;Christian Alfoni&lt;/a&gt;. The eventual plan is to polish the content and host the improved version here with a similar support model.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#commercial-books&quot; id=&quot;commercial-books&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Commercial Books&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#commercial-books&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The commercial side of React books is about to go wild. &lt;strong&gt;Developing a React Edge&lt;/strong&gt; was likely the first book on the market. Since then a few others have followed. The challenge for authors is that as React moves forward quite fast. Books will require constant maintenance effort to stay up to date.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#developing-a-react-edge-the-javascript-library-for-user-interfaces&quot; id=&quot;developing-a-react-edge-the-javascript-library-for-user-interfaces&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Developing a React Edge: The JavaScript Library for User Interfaces&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#developing-a-react-edge-the-javascript-library-for-user-interfaces&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9781939902122.do&quot;&gt;Developing a React Edge&lt;/a&gt; by Frankie Bagnardi, Jonathan Beebe, Richard Feldman, Tom Hallett, Simon H&amp;#xF8;jberg and Karl Mikkelsen was published by Bleeding Edge Press at November 2014. At 234 pages it covers a wide range of React related issues starting from the very basics and including aspects such performance tuning, server side rendering and testing.&lt;/p&gt;
&lt;p&gt;As I haven&amp;apos;t bought the book it is hard for me to evaluate how up to date it is. The book has both digital and paperback versions available. At Amazon the price is around $30 for both VAT included. At O&amp;apos;Reilly digital edition costs $22.99.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#react-d3-js&quot; id=&quot;react-d3-js&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React+d3.js&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#react-d3-js&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://swizec.com/reactd3js/&quot;&gt;React+d3.js&lt;/a&gt; by &lt;a href=&quot;http://swizec.com/&quot;&gt;Swizec Teller&lt;/a&gt; is a focused book at 63 pages. At &lt;a href=&quot;https://leanpub.com/reactd3js&quot;&gt;Leanpub&lt;/a&gt; it&amp;apos;s minimum price is $9 while suggested on is at $19 VAT excluded. There are expanded packages available that provide more material such as screencast and example code. In the book you will build a small data visualization project based on the technologies.&lt;/p&gt;
&lt;p&gt;If you want a quick read that&amp;apos;s straight to the point, this could be it. It&amp;apos;s nowhere broad as &lt;strong&gt;Developing a React Edge&lt;/strong&gt; for instance but if you just want to visualize data, this might work.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#descubre-react&quot; id=&quot;descubre-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Descubre React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#descubre-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/descubre-react&quot;&gt;Descubre React&lt;/a&gt; by &lt;a href=&quot;http://soyjavi.com/&quot;&gt;Javi Jim&amp;#xE9;nez&lt;/a&gt; is a Spanish introduction to React. It has 83 pages and its minimum price is $12.49 VAT excluded.&lt;/p&gt;
&lt;p&gt;If you want a Spanish introduction to React, here&amp;apos;s your only option at the moment.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#rails-meets-react-js&quot; id=&quot;rails-meets-react-js&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Rails Meets React.js&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#rails-meets-react-js&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.arkency.com/rails-react/&quot;&gt;Rails Meets React.js&lt;/a&gt; by Marcin Grzywaczewski and &lt;a href=&quot;http://robert.pankowecki.pl/&quot;&gt;Robert Pankowecki&lt;/a&gt; explains how to get started with React in Ruby on Rails environment. The book is available through Arkency for $49 and has over 150 pages.&lt;/p&gt;
&lt;p&gt;Based on table of contents the book shows you how to get started from scratch, how to set up an effective asset pipeline and of course how to integrate with Rails. The book covers also concepts such as testing, forms and i18n. Note that React portions have been written in CoffeeScript.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#react-by-example&quot; id=&quot;react-by-example&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React by Example&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#react-by-example&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://reactkungfu.com/react-by-example/&quot;&gt;React by Example&lt;/a&gt; by Arkency explains React through numerous examples. The book shows how to build a password strength meter, credit card input and Twitter posting box for instance. The book is available for $49 and has over 130 pages.&lt;/p&gt;
&lt;p&gt;If you want to learn React through a series of specific examples this might be the way to go. Even though the book is in early access it has sold already over 200 copies.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#easy-react&quot; id=&quot;easy-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Easy React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#easy-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://easyreactbook.com/&quot;&gt;Easy React&lt;/a&gt; by &lt;a href=&quot;http://www.wjgilmore.com/&quot;&gt;W. Jason Gilmore&lt;/a&gt; is available through &lt;a href=&quot;https://leanpub.com/easyreact&quot;&gt;Leanpub&lt;/a&gt;. The book is currently in beta and the price starts from $14.99 without VAT. At the time of writing it has 83 pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Easy React&lt;/strong&gt; is a project based book and focuses on an application known as &lt;em&gt;VocabGiant&lt;/em&gt;, a language learning tool. The book discusses a wide range of topics ranging from setting up a development environment, developing the app (Flux included), developing a backend (REST + Express + MongoDB) and React Native. So by the looks of it this should be a great book for a full stack developer!&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#reactjs-cookbook&quot; id=&quot;reactjs-cookbook&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;ReactJS Cookbook&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#reactjs-cookbook&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/web-development/reactjs-cookbook&quot;&gt;ReactJS Cookbook&lt;/a&gt; by Johannes Stein is available through Packt exclusively at the moment. It is on preorder for $39.68 and is due November.&lt;/p&gt;
&lt;p&gt;As many books discussed by now, &lt;strong&gt;ReactJS Cookbook&lt;/strong&gt; shows you how React components work and goes into topics such as animation, isomorphism, ES6 and testing. It is expected to have 301 pages.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#react-js-essentials&quot; id=&quot;react-js-essentials&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React.js Essentials&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#react-js-essentials&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/web-development/reactjs-essentials&quot;&gt;React.js Essentials&lt;/a&gt; by &lt;a href=&quot;http://artemij.com/&quot;&gt;Artemij Fedosejev&lt;/a&gt; is available through Packt and Amazon. At Packt preorder price of the digital version is $23.80 while at &lt;a href=&quot;http://www.amazon.com/React-js-Essentials-Artemij-Fedosejev-ebook/dp/B00YSILZRW&quot;&gt;Amazon&lt;/a&gt; Kindle version is available for $29.75. According to Packt site the book should been available in July but Amazon has expected date at January 2016.&lt;/p&gt;
&lt;p&gt;The book is expected to have 194 pages. It covers basics of React and goes into architecture (Flux). There is also information about testing (Jest). No official table of contents is available as of yet.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#introduction-to-react&quot; id=&quot;introduction-to-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Introduction to React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#introduction-to-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apress.com/9781484212462&quot;&gt;Introduction to React&lt;/a&gt; by &lt;a href=&quot;http://cgack.blogspot.com&quot;&gt;Cory Gackenheimer&lt;/a&gt; is available through Apress and Amazon. At Apress digital edition is available for $17.99 while print costs $24.99. At Amazon paperback costs $19.68. The book is expected to be available at September.&lt;/p&gt;
&lt;p&gt;The planned length of the book is 170 pages and it will cover basics of React, Flux architecture and testing at least. There is also specific discussion about JSX.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#react-up-running-building-web-applications&quot; id=&quot;react-up-running-building-web-applications&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React: Up &amp;amp; Running: Building Web Applications&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#react-up-running-building-web-applications&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920042266.do&quot;&gt;React: Up &amp;amp; Running: Building Web Applications&lt;/a&gt; by &lt;a href=&quot;http://www.phpied.com/&quot;&gt;Stoyan Stefanov&lt;/a&gt; is available through O&amp;apos;Reilly and Amazon. At O&amp;apos;Reilly digital early access version costs $33.99 while print goes for $39.99. At Amazon print is slightly cheaper at $37.99.&lt;/p&gt;
&lt;p&gt;Early chapters of the book are already available and according to Amazon the full book should be completed by December. The book will have around 250 pages.&lt;/p&gt;
&lt;p&gt;I probably don&amp;apos;t need to repeat myself here. Expect to learn basics of React and then some.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#master-react&quot; id=&quot;master-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Master React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#master-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://ludovf.net/reactbook/&quot;&gt;Master React&lt;/a&gt; by Ludovico Fischer doesn&amp;apos;t have a lot of information available yet. Digital version of the book is due Autumn and there is some early content at the site.&lt;/p&gt;
&lt;p&gt;By the looks of the book will go through a wide range of React related concepts. These include development tools, third party libraries, JSX and server-side React as with so many other books.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mastering-react&quot; id=&quot;mastering-react&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Mastering React&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#mastering-react&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://pragprog.com/book/lfreact/mastering-react&quot;&gt;Mastering React&lt;/a&gt; by The Pragmatic Programmers doesn&amp;apos;t have a lot of information available. So far we know that it will have 250 pages and is due 10th of January, 2016.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#react-native-books&quot; id=&quot;react-native-books&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;React Native Books&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#react-native-books&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;apos;s also an emerging category of React Native books and the first book has already been released and more are on their way.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#beginning-mobile-app-development-with-react-native&quot; id=&quot;beginning-mobile-app-development-with-react-native&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Beginning Mobile App Development with React Native&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#beginning-mobile-app-development-with-react-native&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://beginning-mobile-app-development-with-react-native.com/&quot;&gt;Beginning Mobile App Development with React Native&lt;/a&gt; by &lt;a href=&quot;http://manuel.kiessling.net/&quot;&gt;Manuel Kiessling&lt;/a&gt; is likely the first book on the market. It is available through &lt;a href=&quot;https://leanpub.com/beginning-mobile-app-development-with-react-native&quot;&gt;Leanpub&lt;/a&gt; for $29.99 (no VAT) and has 82 pages guiding you into the topic.&lt;/p&gt;
&lt;h3 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#learning-react-native&quot; id=&quot;learning-react-native&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Learning React Native&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#learning-react-native&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920041511.do&quot;&gt;Learning React Native&lt;/a&gt; by &lt;a href=&quot;http://blog.bonnieeisenman.com/&quot;&gt;Bonnie Eisenman&lt;/a&gt; is available through O&amp;apos;Reilly and Amazon. At O&amp;apos;Reilly digital early access version costs $33.99 while print goes for $39.99. At Amazon print is available for $32.59 and is expected to deliver at December. The book will be around 200 pages long.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A lot of the React books have significant overlap. Their length ranges from very short (63 pages) up to quite long (301 pages). There&amp;apos;s also wide variance in pricing as a result. The cheapest goes for $9 while the most expensive costs $49. There are both self-published options and books backed by a publisher. It is hard to comment on the quality of the books as I haven&amp;apos;t read these.&lt;/p&gt;
&lt;p&gt;The situation is very interesting. It&amp;apos;s going to be difficult for a book to stand out content-wise. The biggest differentiating factor I can see is actually openness of the book. My book is a notable exception to the rule. It&amp;apos;s going to be interesting to see if it makes any difference compared to the competition and publisher backed options.&lt;/p&gt;
&lt;p&gt;Let me know if I missed some awesome book at the comments and I&amp;apos;ll add it to the listing.&lt;/p&gt;
</content></entry><entry ><title >SurviveJS - Webpack and React v1.5</title><id >asurvivejswebpackandreactv152015-07-31t00:00:00+03:00</id><link href="http://survivejs.com/blog/survivejs-15"></link><updated >2015-07-31T00:00:00+03:00</updated><content type="html">&lt;p&gt;Compared to the previous tagged release (v1.1.0, 10th of July) this new one (v1.5.0) is a monster. 274 commits went into it and nine contributors took part. Of course it was up to me to do most of the work. That said it is always amazing to get external contributions. It always makes my day when I get one.&lt;/p&gt;
&lt;p&gt;I have to give my biggest thanks to &lt;a href=&quot;https://github.com/Foxandxss&quot;&gt;Jes&amp;#xFA;s Rodr&amp;#xED;guez Rodr&amp;#xED;guez&lt;/a&gt;, my new official editor! It&amp;apos;s not understatement to say that he motivated most of the changes you see in the current revision.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#book-improvements&quot; id=&quot;book-improvements&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Book Improvements&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#book-improvements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The book has been improved in various important ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The early part of the book gets faster to the interesting parts (i.e. React). I removed some of the fluff (Flow, redundant &lt;code&gt;index.html&lt;/code&gt; etc.) and eliminated the old &lt;code&gt;Getting Started&lt;/code&gt; chapter. Now you jump straight to &lt;a href=&quot;/webpack_react/developing_with_webpack&quot;&gt;developing with webpack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There&amp;apos;s a new chapter about &lt;a href=&quot;/webpack_react/building_kanban&quot;&gt;building the Kanban project&lt;/a&gt;. I focus on production related concerns there solely and discuss various related techniques. I believe some of those might be useful even if you don&amp;apos;t care about the project itself.&lt;/li&gt;
&lt;li&gt;The architecture of the Kanban application has been revamped to be singleton based. This is more faithful to the way &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux architecture&lt;/a&gt; has been designed to use. There are some parts of code that aren&amp;apos;t particularly beautiful and there&amp;apos;s likely some room for improvement.&lt;/li&gt;
&lt;li&gt;More insightful explanations. Instead of dropping some code and waiting you to decipher it I&amp;apos;ve moved to &lt;strong&gt;explain&lt;/strong&gt;, &lt;strong&gt;show code&lt;/strong&gt;, &lt;strong&gt;what happened&lt;/strong&gt; kind of model that should be hopefully easier to follow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition there are hundreds of other fixes. But you know me, I don&amp;apos;t like to ramble too much. You can see GitHub for &lt;a href=&quot;https://github.com/survivejs/webpack_react/compare/v1.1.0...v1.5.0&quot;&gt;all changes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#known-issues&quot; id=&quot;known-issues&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Known Issues&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#known-issues&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The portions dealing with Alt don&amp;apos;t support hot loading yet. I will have to craft a pull request to fix &lt;a href=&quot;https://github.com/goatslacker/alt/issues/408&quot;&gt;a hot loading issue&lt;/a&gt;. Doing that should improve your experience a bit. So be prepared to refresh the old fashioned way for now.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will prioritize my work depending on the feedback this release receives. I know some of the current content can be pushed further. For instance &lt;a href=&quot;/webpack_react/deploying_applications&quot;&gt;deployment chapter&lt;/a&gt; could use some TLC. On the other hand it would be a good idea to start serving my paying clients (i.e. Leanpub readers) better.&lt;/p&gt;
&lt;p&gt;Given I want to provide the guys that support me a little extra something I&amp;apos;ve thought of making &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues?q=is%3Aopen+is%3Aissue+label%3A%22bonus+chapter%22&quot;&gt;bonus chapters&lt;/a&gt; available on early access through Leanpub. The chapters would become available to public as certain conditions are met.&lt;/p&gt;
&lt;p&gt;In order to encourage you to encourage me I could tie it to amount of readers. There are two hundred readers right now. I could release a new chapter as another two hundred are gained for instance until I run out of chapters to write. I believe this would be a fair way to deal with it.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope you enjoy this release. There&amp;apos;s a lot of content to go through. As usual &lt;a href=&quot;https://github.com/survivejs/webpack_react/issues&quot;&gt;feedback&lt;/a&gt; and pull requests are welcome. I hope you enjoy the improved version of the book.&lt;/p&gt;
&lt;p&gt;Remember that you can support my work by &lt;a href=&quot;https://leanpub.com/survivejs_webpack_react&quot;&gt;purchasing the book at Leanpub&lt;/a&gt;. Every little bit counts and allows me to keep it up.&lt;/p&gt;
</content></entry><entry ><title >Web Design is Scrappy</title><id >awebdesignisscrappy2015-07-17t00:00:00+03:00</id><link href="http://survivejs.com/blog/web-design-is-scrappy"></link><updated >2015-07-17T00:00:00+03:00</updated><content type="html">&lt;p&gt;If you had to describe my approach to web design in one word the word would be scrappy. I rather get something to work fast than agonize on details. It is going to take a fair amount of iteration no matter what. This site is a good example of scrappy design.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#getting-scrappy&quot; id=&quot;getting-scrappy&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Getting Scrappy&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#getting-scrappy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I started from a base design created by &lt;a href=&quot;http://eldh.co/&quot;&gt;Andreas Eldh&lt;/a&gt;. We have developed a static site generator known as &lt;a href=&quot;https://antwarjs.github.io/&quot;&gt;Antwar&lt;/a&gt; together. Incidentally it is based upon webpack and React. And Antwar itself is based on an &lt;a href=&quot;http://braddenver.com/blog/2015/react-static-site.html&quot;&gt;experiment by Brad Denver&lt;/a&gt;. Feeling scrappy yet?&lt;/p&gt;
&lt;p&gt;As nothing is harder than evaluating your own work I looked actively for feedback during the development process. I had to &lt;a href=&quot;https://antwarjs.github.io/blog/antwar-050/&quot;&gt;develop Antwar further&lt;/a&gt; in order to reach my goals. Besides the technical part I also had to make sure the content is accessible and that there&amp;apos;s marketing copy in place.&lt;/p&gt;
&lt;p&gt;The design is scrappy in sense that I integrated ideas from various sources. Sometimes I might realize something randomly and will just add it there. A good example is the recent addition of commenting per chapter. I understood it might be a nice way to get some extra feedback on content and help me to see potential problems clearer. And given it was fast to add, it made perfect sense.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#services-to-support-scrappy-design&quot; id=&quot;services-to-support-scrappy-design&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Services to Support Scrappy Design&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#services-to-support-scrappy-design&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Besides asking for feedback from friends and sometimes total strangers I used a couple of services with varying results. Out of the services &lt;a href=&quot;http://www.criticue.com/&quot;&gt;criticue&lt;/a&gt; worked the best for me. Often it&amp;apos;s the negative feedback that helps you the most. Criticue helped me to prune out the worst mishaps.&lt;/p&gt;
&lt;p&gt;As I had good experiences of &lt;a href=&quot;http://feedbackroulette.com/&quot;&gt;Feedback roulette&lt;/a&gt; in the past I set it up too. Unfortunately I have yet to receive single useful round of feedback even though I have a single credit for testing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fivesecondtest.com/&quot;&gt;Five Second Test&lt;/a&gt; was useful for getting answers to specific design issues. I didn&amp;apos;t use it a lot, though, but I can see its value. The response times were adequate as well.&lt;/p&gt;
&lt;p&gt;All of these services allow you to earn credits by providing feedback yourself. Even though this takes time it can be enlightening to see designs of other people and help them to improve. Perhaps over longer term you might develop a stronger intuition for design.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I believe the current design of the site is quite passable. It doesn&amp;apos;t remind me of the 90s too much at least. I&amp;apos;m sure it could be better in some ways but as they say you are blind to your own work. I have outlined some issues I&amp;apos;m aware of at the &lt;a href=&quot;https://github.com/survivejs/site/issues&quot;&gt;site issue tracker&lt;/a&gt;. If you have any ideas, please set up issues there for me to study or comment on this post.&lt;/p&gt;
&lt;p&gt;I would love to have more functionality on the site. Even though Disqus comments work I believe Medium style commenting system would work better for books. Unfortunately I haven&amp;apos;t been able to find a suitable 3rd party service for this purpose yet.&lt;/p&gt;
&lt;p&gt;It would be nice to have more interactivity. Web as a platform would allow that but of course it&amp;apos;s going to require a lot of work to pull off. That said if you are aiming for the maximum amount of awesomeness, go interactive.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-could-have-been-done-differently-&quot; id=&quot;what-could-have-been-done-differently-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Could Have Been Done Differently?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-could-have-been-done-differently-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would have probably saved a great deal of time by going with some established solution such as &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress&lt;/a&gt; or &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; supports Jekyll particularly well and I have even written a &lt;a href=&quot;http://yeswejekyll.com/&quot;&gt;scrappy guide for it&lt;/a&gt; so I know the topic. I&amp;apos;m also aware of the limitations of Jekyll. Developing Antwar gave me a good excuse to learn more about the topic.&lt;/p&gt;
&lt;p&gt;Whole site design could have been bought from elsewhere. Same goes for marketing copy, photography and such. In fact this given me a good excuse to work on these skills. That said it may be a good idea to use professional services in the future. After all they have spent years honing their skills and will be able to get better results faster.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope this brief post gave you some idea of why the site is the way it is. If you like the design or just want to study how it has been made, check out the &lt;a href=&quot;https://github.com/survivejs/site&quot;&gt;site repository&lt;/a&gt;. The source itself might be a little scrappy in parts but that&amp;apos;s to be expected. It&amp;apos;s a scrappy design after all!&lt;/p&gt;
&lt;p&gt;I suppose the nicest thing about working on a webpack and React stack is that it gives me a nice amount of flexibility. I can build layouts using React and author using Markdown. That&amp;apos;s the best out of both worlds. Antwar is still missing some of the functionality you might expect (pagination, tagging etc.) but it keeps on growing as I use it. No need to aim for perfection the first time around.&lt;/p&gt;
&lt;p&gt;I feel web design is scrappy by definition. It is hard to get everything right the first time around. It is a good idea to leave room for creativity and experimentation. I suppose taken further you would start running tests on your site and looking at the numbers. So far my approach has been guided by intuition and might not be the best when compared to data based approaches.&lt;/p&gt;
</content></entry><entry ><title >Reaching Towards the Next Level</title><id >areachingtowardsthenextlevel2015-07-15t00:00:00+03:00</id><link href="http://survivejs.com/blog/reaching-towards-the-next-level"></link><updated >2015-07-15T00:00:00+03:00</updated><content type="html">&lt;p&gt;In &lt;a href=&quot;../balance&quot;&gt;my previous post&lt;/a&gt; I discussed some of the difficulties of related to technical publishing. I also presented a possible solution, a mixed model that might make open publishing more feasible. The idea is that starting closed and asking for money beforehand you reward early adopters while decreasing the risk of the author. As the content gets opened eventually others can benefit from it. I know this goes against the common wisdoms of book publishing but it&amp;apos;s a model I would like to try.&lt;/p&gt;
&lt;p&gt;It has become apparent to me that if I put my weight behind it, I could grow this into a business that&amp;apos;s able to support me and perhaps a few others should I get so lucky. Even though Finland has its issues it isn&amp;apos;t a bad place to start a company. In fact there&amp;apos;s support for starting businesses that can help to cover starting costs up to 18 months. It will be enough to get past the beginning stage.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-would-a-viable-business-look-like-&quot; id=&quot;what-would-a-viable-business-look-like-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Would a Viable Business Look Like?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-would-a-viable-business-look-like-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to get by I would have to make around $1500 per month after taxes. That&amp;apos;s $50 per day. In terms of book sales that would mean five sales per day assuming a book costs $20 (half goes to side costs). It doesn&amp;apos;t sound so hard when put this way.&lt;/p&gt;
&lt;p&gt;Fortunately book sales aren&amp;apos;t the only towards a sustainable business. More specialized products can be built on top of the freely available content. In addition I&amp;apos;m open to consulting. In the end it comes down to finding the ways in which I can be most useful and provide most value.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#it-s-about-helping-other-developers&quot; id=&quot;it-s-about-helping-other-developers&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;It&amp;apos;s About Helping Other Developers&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#it-s-about-helping-other-developers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a developer myself I have known my share of pain. SurviveJS is about that. I want you to avoid some of that pain. If I can make someone&amp;apos;s life a little easier through SurviveJS I have done my job.&lt;/p&gt;
&lt;p&gt;Besides helping developers I would love to be able to help smoothen the way for other technical authors. Getting started is tough and anything you can do to make it less so is welcome. Leanpub helps in its own way but it isn&amp;apos;t nearly enough. There are just so many things to worry about. And should you fail at some critical aspect, you end up with a dud.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#next-steps&quot; id=&quot;next-steps&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Next Steps&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My next major goal is to resolve the biggest remaining issues related to the book and get a release out on 31st. After that I&amp;apos;ll expand distribution to see if that makes any difference.&lt;/p&gt;
&lt;p&gt;I have a couple of older books in backburner waiting to be edited. One of them is &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;Webpack and React Cookbook&lt;/a&gt;. It deserves a refresh and an editing pass. As the content is already freely available that won&amp;apos;t change. Ebook will cost, though, and will hopefully provide some financial relief.&lt;/p&gt;
&lt;p&gt;Another, older effort known as &lt;a href=&quot;https://github.com/survivejs/js_tricks_and_tips&quot;&gt;JavaScript Tips and Tricks&lt;/a&gt;, will require a bigger refresh. It&amp;apos;s actually the original &amp;quot;SurviveJS&amp;quot; and the reason why I ended up with the name. The idea of this book is to go through a variety of JavaScript techniques to give you deeper insight to the language. It won&amp;apos;t be a long book. It&amp;apos;s more of a &amp;quot;oh, I can do that?&amp;quot; type of an affair.&lt;/p&gt;
&lt;p&gt;Over shorter term I want to establish little streams like these. After all every dollar counts at this point. The sooner I can reach my viability goal, the better. Over longer term I would love to grow the brand to help other technical authors. But before I can do that I need to help myself and figure out these things. Fortunately I won&amp;apos;t have to do that alone as community support has shown.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Becoming incorporated is both an exciting and a scary step. So far community response has been great so why not to push it and see if this can be turned into a real business? The numbers look realistic to me. In the worst case it won&amp;apos;t work out and I end up with a ton of references to use at a job interview. In the best case I&amp;apos;ll have a little business that will allow me to produce even more content and most importantly keep on helping.&lt;/p&gt;
</content></entry><entry ><title >Balancing Between Open and Closed Publishing</title><id >abalancingbetweenopenandclosedpublishing2015-07-14t00:00:00+03:00</id><link href="http://survivejs.com/blog/balance"></link><updated >2015-07-14T00:00:00+03:00</updated><content type="html">&lt;p&gt;If there&amp;apos;s one thing technical authors have in common, it&amp;apos;s that they all want to help other people. The question is how to achieve that most effectively. In my &lt;a href=&quot;../the-story-so-far&quot;&gt;previous post&lt;/a&gt; I discussed how I have fared with my first effort so far. The results have been mixed. Community response has been amazing in many ways but that hasn&amp;apos;t translated to amazing sales. That said I&amp;apos;m grateful to all that have contributed. In the end sales enable further efforts.&lt;/p&gt;
&lt;p&gt;I was likely naive in thinking that having the content freely available while offering a way to purchase a digital copy would work by default. The greatest benefit of this approach has been possible extra visibility (easy to link) and the amount of external contributions. I believe this has improved the quality of the book further than I could have ever achieved alone. Next time around I might have a group of people that are interested in pushing the content straight from the start!&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#current-publishing-solutions&quot; id=&quot;current-publishing-solutions&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Current Publishing Solutions&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#current-publishing-solutions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As an author you have a couple of options. You can try to pitch your idea to an established publisher. They would take care of the logistics, provide editing and help with the marketing and sales efforts. In return they would take a significant chunk of the profit. Normally you can expect a royalty between 15 and 50 percent per sale depending on the publisher. If you are a tough negotiator you can receive an advance. That will help to fund authoring and will be deduced from potential profits.&lt;/p&gt;
&lt;p&gt;Another option is to self-publish. You will take care of the bits a traditional publisher would. In return you receive a larger chunk of the profit but on the downside you have more work ahead of you. Especially as a first time author this will include some additional risk as you have to learn these things. If you don&amp;apos;t have a pre-existing audience you will have to earn it. More established authors have an advantage here.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#self-publishing-approaches&quot; id=&quot;self-publishing-approaches&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Self-publishing Approaches&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#self-publishing-approaches&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you choose self-publishing you have some additional alternatives. You can do it the old fashioned way. First you find the potential reader somehow, demonstrate the value and close the sale. This isn&amp;apos;t the only way, though. Making the content freely available makes the sales effort voluntary. You can gain value, consider it zero and move along.&lt;/p&gt;
&lt;p&gt;You can also try to compromise between these ends. Having some of the content available may encourage the potential reader to purchase the rest. You can also refine the content into different formats (audio/video) and aim to produce most of the income through that. A book can give you certain amount of prestige and lead to consulting opportunities.&lt;/p&gt;
&lt;p&gt;The biggest benefit of having the content freely available is that it becomes easy to share it. It won&amp;apos;t feel like selling. You can gently point towards your content without feeling too bad. Your readers can contribute directly without having to go through an errata process. Business-wise the problem is that you are relying on generosity.&lt;/p&gt;
&lt;p&gt;If you want something equivalent to an advance, there are a couple of alternatives. Platforms such as &lt;a href=&quot;https://www.kickstarter.com/&quot;&gt;Kickstarter&lt;/a&gt; or &lt;a href=&quot;https://www.indiegogo.com/&quot;&gt;Indiegogo&lt;/a&gt; have become popular. Essentially they provide one way to receive pre-sales and validate the concept. Platforms such as &lt;a href=&quot;https://www.patreon.com/&quot;&gt;Patreon&lt;/a&gt; allow you to receive donations that can contribute towards your efforts. Feasibility of these depends upon your legislation.&lt;/p&gt;
&lt;p&gt;To measure potential interest before moving on with your idea you can set up a light landing page. There are services such as &lt;a href=&quot;https://www.launchrock.com/&quot;&gt;Launchrock&lt;/a&gt; that will allow you to set up one easily. You can start gathering emails of the interested readers and begin to build your audience. I went the hard way and build a site of my own but that doesn&amp;apos;t mean you have to.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#an-alternative-self-publishing-approach&quot; id=&quot;an-alternative-self-publishing-approach&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;An Alternative Self-publishing Approach&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#an-alternative-self-publishing-approach&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given it is not possible for me to leverage donations or crowdfunding without potential trouble I started thinking about alternatives. It seems to me it should be possible to merge some of the best features of both open and closed approaches.&lt;/p&gt;
&lt;p&gt;I like how open approach fosters contribution. It is encouraging and helps you to refine your content better faster. The problem is that it is difficult to demonstrate value and convert that into sales. The closed approach doesn&amp;apos;t have that problem but contributing won&amp;apos;t be as easy. In addition linking to content isn&amp;apos;t going to work by definition.&lt;/p&gt;
&lt;p&gt;What if it was possible to take a bit of open, a bit of closed and a bit of Kickstarter, mix it together and end up with something that works for both authors and readers? I imagine it could work as a graduation process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A book idea is identified based on community demand. You as an author pick it up, perform further market study on it and decide to proceed based on that.&lt;/li&gt;
&lt;li&gt;The book will get started in a closed incubator (private GitHub repository for instance) and pre-sales begin. Early adopters will receive access to the content and will be able to contribute towards development of the book.&lt;/li&gt;
&lt;li&gt;After a predefined sales threshold is reached (Kickstarter bit) the book content will become available to the public. To make sure book content becomes open despite the sales, a time limit (a year or two?) can be set after which it will become open.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The idea is that by starting closed you provide incentive for early adopters to buy due to exclusivity. Just being able to contribute towards the development of the book can be a good incentive. You will still get contributions just like in an open model. This requires a certain level of trust, however. What if someone forks the content and runs with it?&lt;/p&gt;
&lt;p&gt;The Kickstarter bit is there to push community towards a common goal. Open content is valuable as it will allow people to access knowledge regardless of their income. It is a shame to see old books become forgotten due to long copyright terms. The time limit is a way to work against this.&lt;/p&gt;
&lt;p&gt;Too often good technical books become obsolete in a blink. Having them maintained by the community that uses them actively seems like a good idea to me. After all this is the way open source has proven to work.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perhaps hitting some kind of a balance between open and closed ways of publishing would pave way for more technical authors. In addition it should help in keeping the content fresh. That is a problem that plagues technical books in particular. Technology tends to be a moving target and having books with better longevity isn&amp;apos;t a bad goal.&lt;/p&gt;
&lt;p&gt;I believe an alternative model such as this could help to alleviate some of the risks involved. I am certain there are problems I am overlooking. But based on what I&amp;apos;ve seen perhaps it could work. What do you think?&lt;/p&gt;
</content></entry><entry ><title >SurviveJS - The Story So Far</title><id >asurvivejsthestorysofar2015-07-13t00:00:00+03:00</id><link href="http://survivejs.com/blog/the-story-so-far"></link><updated >2015-07-13T00:00:00+03:00</updated><content type="html">&lt;p&gt;Given I&amp;apos;m a first time author I&amp;apos;ve done my fair share of mistakes with &lt;a href=&quot;http://survivejs.com/&quot;&gt;SurviveJS - Webpack and React&lt;/a&gt;. It was an attempt to change the direction of my career. Being a subcontractor&amp;apos;s subcontractor provides income, sure, but was a dead end for me with no room to grow in an economy that keeps getting tougher. Interestingly the book has garnered a lot of attention and I believe some have found it useful. It has been bit of a disaster economically and it&amp;apos;s hard to imagine I could keep a business like this up for long if something doesn&amp;apos;t change.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#why-survivejs-webpack-and-react-was-written-&quot; id=&quot;why-survivejs-webpack-and-react-was-written-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Why SurviveJS - Webpack and React Was Written?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#why-survivejs-webpack-and-react-was-written-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first steps towards the book were taken at the end of January. I happened upon &lt;a href=&quot;https://christianalfoni.github.io/javascript/2014/12/13/did-you-know-webpack-and-react-is-awesome.html&quot;&gt;a blog post about Webpack by Christian Alfoni&lt;/a&gt;. As I had worked with webpack and React earlier I of course couldn&amp;apos;t resist commenting. I even proposed that it would be nice if there was a cookbook about the topic. The comment has been lost to the history but Christian took on my initiative. As a result &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/&quot;&gt;react-webpack-cookbook&lt;/a&gt; was born.&lt;/p&gt;
&lt;p&gt;We worked on it together for a few weeks and I started to realize there&amp;apos;s demand. It would have saved me so much time if someone had gathered this information to one place. As a result I poked a contact of mine at a quite known book publisher that pays decent royalties. And so the negotiations began. We negotiated till early April but in the end the publisher wasn&amp;apos;t interested. We failed at writing style.&lt;/p&gt;
&lt;p&gt;That could have been the end of the story but the opportunity seemed too good to miss. There was a clear demand for a book. Why not to write it? As Christian got busy with work and I was getting increasingly frustrated with my situation I decided to channel the frustration towards something constructive and so I started writing the book. Sometimes you have to go &amp;quot;all in&amp;quot; no matter what.&lt;/p&gt;
&lt;p&gt;As I didn&amp;apos;t feel like going through another round of negotiations with other publishers and I was aware of &lt;a href=&quot;https://leanpub.com/&quot;&gt;Leanpub&lt;/a&gt; I decided to pick them. Early on I agreed with Christian to keep the material open. I was a bit hesitant at first but the approach has shown some of its benefits. I&amp;apos;m still a bit unsure about the financial part, though.&lt;/p&gt;
&lt;p&gt;The nice thing about Leanpub is that it allows you to test the market so to speak. I actually released the initial, raw version of the book for free and slowly but surely started to bump up the price as the content matured. That allowed me to gauge interest in the topic. One day Leanpub decided to feature the book and this in turn converted to a nice amount of sales. It always gives you an extra dose of motivation to see people actually appreciate your work.&lt;/p&gt;
&lt;p&gt;An alternative would have been to start pre-sales through a platform such as &lt;a href=&quot;https://www.kickstarter.com/&quot;&gt;Kickstarter&lt;/a&gt;. Unfortunately that was not an option for me as a finn given our legislation is against it. There are strict regulations against donations to protect citizens against fraud. Even though understandable it can be a little restricting at times.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#where-i-failed-&quot; id=&quot;where-i-failed-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Where I Failed?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#where-i-failed-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having the content &lt;a href=&quot;https://github.com/survivejs/webpack_react&quot;&gt;out in the open&lt;/a&gt; has resulted in numerous external contributions. I believe this has contributed towards the quality of the book immensely and will continue to do so. But here lies the great conundrum. Why would you pay for something that&amp;apos;s freely available?&lt;/p&gt;
&lt;p&gt;So far the book has earned around $1177 excluding Leanpub&amp;apos;s cut (10% + $0.50 per sale). After all the middlemen (PayPal, government, co-op) get their cut and taxes have been paid, that translates to 614 euros. That would be even less if I earned more per year due to the way tax progression works. It would have been more profitable for me to fiddle my thumbs at home and live on social security.&lt;/p&gt;
&lt;p&gt;The big question is can this situation be changed somehow? I would of course love to keep on developing content. The goofy prefix &lt;code&gt;SurviveJS&lt;/code&gt; implies a series of book. But if I can expect profits like this it just doesn&amp;apos;t make any sense economically. Even though I write because I want to write I still need to make enough to have butter on my bread.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#what-next-&quot; id=&quot;what-next-&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;What Next?&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#what-next-&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial plan was that people that feel they get value out of the book would buy the digital version to help fund the maintenance effort and development of new content. Unfortunately this isn&amp;apos;t working out as you can see from the figures above. Sure, the book might generate some income but nowhere enough to make this worth it financially.&lt;/p&gt;
&lt;p&gt;As far as I can see there are a few options. The easiest option would be just to give up and move onto something more profitable. I had a good run but it wasn&amp;apos;t enough this time. End of story. That would be a silly way to end this, though.&lt;/p&gt;
&lt;p&gt;As donations are illegal that rules out Kickstarter, Patreon and such. I can see these approach have worked for many but unfortunately it&amp;apos;s not possible here.&lt;/p&gt;
&lt;p&gt;I could stop maintaining the open content while putting all the effort to a superior, commercial version. I feel this might result in a lot of bad karma, though. That said I could develop commercial content on top of the free content and sell that perhaps.&lt;/p&gt;
&lt;h2 class=&quot;header&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#conclusion&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;span class=&quot;text&quot;&gt;Conclusion&lt;/span&gt;&lt;a class=&quot;header-anchor-select&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though the book has been a success in some ways and exposed people to webpack and React, unfortunately it has failed in the only way that matters in the end. If there&amp;apos;s not a sustainable source of income it is hard to justify the effort financially. I would love to develop more content but if the invisible hand decides it&amp;apos;s not possible, then it&amp;apos;s not.&lt;/p&gt;
&lt;p&gt;In the end if we want to keep this project alive we&amp;apos;ll need to climb that final, financial hurdle. It is the hardest hurdle for me as I may have to bend on some of my principles. How is it possible to combine open content and business?&lt;/p&gt;
</content></entry></feed>